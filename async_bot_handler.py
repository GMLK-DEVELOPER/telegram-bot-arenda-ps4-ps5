import asyncio
import aiohttp
import aiofiles
import json
import os
import logging
from datetime import datetime
from typing import Dict, List, Optional, Any
from concurrent.futures import ThreadPoolExecutor
import threading
from functools import wraps
import time

from performance_optimizer import (
    db_manager, file_handler, data_processor, memory_optimizer,
    async_cached, memory_optimized
)

logger = logging.getLogger(__name__)

class AsyncBotHandler:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ—Ç–∞ —Å –≤—ã—Å–æ–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é"""
    
    def __init__(self, bot_token: str):
        self.bot_token = bot_token
        self.api_url = f"https://api.telegram.org/bot{bot_token}"
        self.session = None
        self.executor = ThreadPoolExecutor(max_workers=16)
        
        # –û—á–µ—Ä–µ–¥–∏ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.message_queue = asyncio.Queue(maxsize=1000)
        self.callback_queue = asyncio.Queue(maxsize=500)
        self.file_queue = asyncio.Queue(maxsize=100)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.stats = {
            'messages_processed': 0,
            'files_processed': 0,
            'start_time': time.time(),
            'errors': 0
        }
        
        logger.info("–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ HTTP —Å–µ—Å—Å–∏–∏ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
            connector = aiohttp.TCPConnector(
                limit=100,
                limit_per_host=30,
                keepalive_timeout=30,
                enable_cleanup_closed=True
            )
            
            timeout = aiohttp.ClientTimeout(total=30, connect=10)
            self.session = aiohttp.ClientSession(
                connector=connector,
                timeout=timeout
            )
            
            # –ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–µ–π
            tasks = [
                asyncio.create_task(self._message_worker()),
                asyncio.create_task(self._callback_worker()),
                asyncio.create_task(self._file_worker()),
                asyncio.create_task(self._stats_worker())
            ]
            
            logger.info("–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—â–µ–Ω")
            await asyncio.gather(*tasks)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞: {e}")
            raise
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        if self.session:
            await self.session.close()
        self.executor.shutdown(wait=True)
        logger.info("–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def _message_worker(self):
        """–í–æ—Ä–∫–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        while True:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                message_data = await self.message_queue.get()
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                await self._process_message_async(message_data)
                
                # –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
                self.message_queue.task_done()
                self.stats['messages_processed'] += 1
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ message_worker: {e}")
                self.stats['errors'] += 1
    
    async def _callback_worker(self):
        """–í–æ—Ä–∫–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        while True:
            try:
                callback_data = await self.callback_queue.get()
                await self._process_callback_async(callback_data)
                self.callback_queue.task_done()
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ callback_worker: {e}")
                self.stats['errors'] += 1
    
    async def _file_worker(self):
        """–í–æ—Ä–∫–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤"""
        while True:
            try:
                file_data = await self.file_queue.get()
                await self._process_file_async(file_data)
                self.file_queue.task_done()
                self.stats['files_processed'] += 1
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ file_worker: {e}")
                self.stats['errors'] += 1
    
    async def _stats_worker(self):
        """–í–æ—Ä–∫–µ—Ä –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        while True:
            try:
                await asyncio.sleep(60)  # –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                await self._collect_stats()
                memory_optimizer.optimize_memory()
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ stats_worker: {e}")
    
    async def add_message_to_queue(self, message_data: Dict) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            await self.message_queue.put(message_data)
            return True
        except asyncio.QueueFull:
            logger.warning("–û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞")
            return False
    
    async def add_callback_to_queue(self, callback_data: Dict) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ callback –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            await self.callback_queue.put(callback_data)
            return True
        except asyncio.QueueFull:
            logger.warning("–û—á–µ—Ä–µ–¥—å callback –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞")
            return False
    
    async def add_file_to_queue(self, file_data: Dict) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            await self.file_queue.put(file_data)
            return True
        except asyncio.QueueFull:
            logger.warning("–û—á–µ—Ä–µ–¥—å —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞")
            return False
    
    @async_cached(ttl=300)
    async def _process_message_async(self, message_data: Dict):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            message_type = message_data.get('type', 'text')
            user_id = str(message_data.get('user_id', ''))
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            users = await db_manager.load_data('users.json')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∞
            if users.get(user_id, {}).get('is_banned', False):
                await self._send_message_async(user_id, "‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!")
                return
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if message_type == 'start':
                await self._handle_start_async(message_data, users)
            elif message_type == 'consoles':
                await self._handle_consoles_async(message_data)
            elif message_type == 'profile':
                await self._handle_profile_async(message_data, users)
            elif message_type == 'rental_request':
                await self._handle_rental_request_async(message_data)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def _handle_start_async(self, message_data: Dict, users: Dict):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã start"""
        user_id = str(message_data.get('user_id', ''))
        user_info = message_data.get('user_info', {})
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if user_id not in users:
            users[user_id] = {
                'id': user_id,
                'username': user_info.get('username'),
                'first_name': user_info.get('first_name'),
                'is_banned': False,
                'rentals': [],
                'joined_at': datetime.now().isoformat()
            }
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            await db_manager.save_data('users.json', users)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        welcome_text = "üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∞—Ä–µ–Ω–¥—ã PlayStation!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        await self._send_message_async(user_id, welcome_text)
    
    @async_cached(ttl=60)
    async def _handle_consoles_async(self, message_data: Dict):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Å–æ–ª–µ–π"""
        user_id = str(message_data.get('user_id', ''))
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Å–æ–ª–µ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        consoles = await db_manager.load_data('consoles.json')
        
        if not consoles:
            await self._send_message_async(user_id, "üì≠ –ö–æ–Ω—Å–æ–ª–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–Ω–æ–≥–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–Ω–æ—Å—Ç–∏
        console_list = list(consoles.values())
        formatted_consoles = data_processor.process_data_parallel(
            console_list, 
            self._format_console_info
        )
        
        response = "üéÆ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Å–æ–ª–∏:\n\n" + "\n\n".join(formatted_consoles)
        await self._send_message_async(user_id, response)
    
    @staticmethod
    def _format_console_info(console: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Å–æ–ª–∏"""
        status_emoji = "‚úÖ" if console.get('status') == 'available' else "‚ùå"
        games = console.get('games', [])
        games_text = ", ".join(games[:3]) + ("..." if len(games) > 3 else "")
        
        return (f"{status_emoji} {console.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è')} "
                f"({console.get('model', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å')})\n"
                f"üí∞ –ê—Ä–µ–Ω–¥–∞: {console.get('rental_price', 0)} –ª–µ–π/—á–∞—Å\n"
                f"üéØ –ò–≥—Ä—ã: {games_text}\n"
                f"üÜî ID: {console.get('id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}")
    
    async def _handle_profile_async(self, message_data: Dict, users: Dict):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = str(message_data.get('user_id', ''))
        
        if user_id not in users:
            await self._send_message_async(user_id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞—Ä–µ–Ω–¥
        rentals = await db_manager.load_data('rentals.json')
        
        user = users[user_id]
        user_rentals = [r for r in rentals.values() if r.get('user_id') == user_id]
        active_rentals = [r for r in user_rentals if r.get('status') == 'active']
        
        response = f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
        response += f"üÜî ID: {user_id}\n"
        response += f"üë§ –ò–º—è: {user.get('first_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        response += f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.get('joined_at', '')[:10]}\n"
        response += f"üìä –í—Å–µ–≥–æ –∞—Ä–µ–Ω–¥: {len(user_rentals)}\n"
        response += f"üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥: {len(active_rentals)}\n"
        
        if active_rentals:
            response += "\nüéÆ –ê–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã:\n"
            for rental in active_rentals:
                response += f"‚Ä¢ –ö–æ–Ω—Å–æ–ª—å ID: {rental.get('console_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è')}\n"
                response += f"  –ù–∞—á–∞–ª–æ: {rental.get('start_time', '')[:16]}\n"
        
        await self._send_message_async(user_id, response)
    
    async def _process_callback_async(self, callback_data: Dict):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            callback_type = callback_data.get('type', '')
            user_id = str(callback_data.get('user_id', ''))
            data = callback_data.get('data', {})
            
            if callback_type == 'rent_console':
                await self._handle_rent_console_async(user_id, data)
            elif callback_type == 'end_rental':
                await self._handle_end_rental_async(user_id, data)
            elif callback_type == 'extend_rental':
                await self._handle_extend_rental_async(user_id, data)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
    
    async def _process_file_async(self, file_data: Dict):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤"""
        try:
            file_type = file_data.get('type', '')
            user_id = str(file_data.get('user_id', ''))
            file_info = file_data.get('file_info', {})
            
            if file_type == 'passport':
                await self._handle_passport_upload_async(user_id, file_info)
            elif file_type == 'console_image':
                await self._handle_console_image_upload_async(file_info)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
    
    async def _handle_passport_upload_async(self, user_id: str, file_info: Dict):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞"""
        try:
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            file_path = await self._download_file_async(file_info['file_id'])
            
            if file_path:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                optimization_result = await file_handler.process_file_async(file_path, 'process_image')
                
                if optimization_result:
                    # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ –ø–∞–ø–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_folder = await self._create_user_folder_async(user_id)
                    final_path = os.path.join(user_folder, f"{file_info['document_type']}.jpg")
                    
                    # –ê—Ç–æ–º–∞—Ä–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                    os.rename(optimization_result['optimized_path'], final_path)
                    
                    await self._send_message_async(user_id, "‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                else:
                    await self._send_message_async(user_id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
            else:
                await self._send_message_async(user_id, "‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞: {e}")
    
    async def _download_file_async(self, file_id: str) -> Optional[str]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
            file_info_url = f"{self.api_url}/getFile?file_id={file_id}"
            
            async with self.session.get(file_info_url) as response:
                if response.status == 200:
                    data = await response.json()
                    file_path = data['result']['file_path']
                    
                    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                    file_url = f"https://api.telegram.org/file/bot{self.bot_token}/{file_path}"
                    
                    async with self.session.get(file_url) as file_response:
                        if file_response.status == 200:
                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
                            content_length = file_response.headers.get('content-length')
                            if content_length and int(content_length) > file_handler.max_file_size:
                                logger.warning(f"–§–∞–π–ª {file_id} –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä")
                                return None
                            
                            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                            temp_path = f"temp_{file_id}_{int(time.time())}.tmp"
                            
                            async with aiofiles.open(temp_path, 'wb') as f:
                                async for chunk in file_response.content.iter_chunked(8192):
                                    await f.write(chunk)
                            
                            return temp_path
            
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {file_id}: {e}")
            return None
    
    async def _create_user_folder_async(self, user_id: str) -> str:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        users = await db_manager.load_data('users.json')
        user = users.get(user_id, {})
        user_name = user.get('full_name', user.get('first_name', f'user_{user_id}'))
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è –ø–∞–ø–∫–∏
        safe_name = "".join(c for c in user_name if c.isalnum() or c in (' ', '-', '_')).rstrip()
        user_folder = os.path.join('passport', safe_name)
        
        os.makedirs(user_folder, exist_ok=True)
        return user_folder
    
    async def _send_message_async(self, chat_id: str, text: str, 
                                 reply_markup: Optional[Dict] = None) -> bool:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            url = f"{self.api_url}/sendMessage"
            data = {
                'chat_id': chat_id,
                'text': text,
                'parse_mode': 'Markdown'
            }
            
            if reply_markup:
                data['reply_markup'] = json.dumps(reply_markup)
            
            async with self.session.post(url, json=data) as response:
                success = response.status == 200
                if not success:
                    error_text = await response.text()
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {error_text}")
                
                return success
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ {chat_id}: {e}")
            return False
    
    async def _collect_stats(self):
        """–°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            current_time = time.time()
            uptime = current_time - self.stats['start_time']
            
            stats_data = {
                'uptime_seconds': uptime,
                'messages_processed': self.stats['messages_processed'],
                'files_processed': self.stats['files_processed'],
                'errors': self.stats['errors'],
                'messages_per_second': self.stats['messages_processed'] / uptime if uptime > 0 else 0,
                'queue_sizes': {
                    'messages': self.message_queue.qsize(),
                    'callbacks': self.callback_queue.qsize(),
                    'files': self.file_queue.qsize()
                },
                'timestamp': datetime.now().isoformat()
            }
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            await db_manager.save_data('performance_stats.json', stats_data)
            
            logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {self.stats['messages_processed']} —Å–æ–æ–±—â–µ–Ω–∏–π, "
                       f"{self.stats['files_processed']} —Ñ–∞–π–ª–æ–≤, "
                       f"{stats_data['messages_per_second']:.2f} msg/sec")
                       
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
async_bot_handler = None

async def initialize_async_bot_handler(bot_token: str):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
    global async_bot_handler
    async_bot_handler = AsyncBotHandler(bot_token)
    await async_bot_handler.start()

async def shutdown_async_bot_handler():
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
    global async_bot_handler
    if async_bot_handler:
        await async_bot_handler.stop()

logger.info("–ú–æ–¥—É–ª—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –±–æ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω")