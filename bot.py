import telebot
from telebot import types
import json
import os
import requests
import calendar
from datetime import datetime, timedelta, date
import uuid
from config import TELEGRAM_BOT_TOKEN, ADMIN_TELEGRAM_ID

bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

DATA_DIR = 'data'
PASSPORT_DIR = 'passport'
CONSOLES_FILE = os.path.join(DATA_DIR, 'consoles.json')
USERS_FILE = os.path.join(DATA_DIR, 'users.json')
RENTALS_FILE = os.path.join(DATA_DIR, 'rentals.json')
RENTAL_REQUESTS_FILE = os.path.join(DATA_DIR, 'rental_requests.json')
ADMIN_SETTINGS_FILE = os.path.join(DATA_DIR, 'admin_settings.json')
DISCOUNTS_FILE = os.path.join(DATA_DIR, 'discounts.json')
TEMP_RESERVATIONS_FILE = os.path.join(DATA_DIR, 'temp_reservations.json')
RATINGS_FILE = os.path.join(DATA_DIR, 'ratings.json')

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ø–∞—Å–ø–æ—Ä—Ç–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if not os.path.exists(PASSPORT_DIR):
    os.makedirs(PASSPORT_DIR)

def load_json_file(filename):
    if os.path.exists(filename):
        with open(filename, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}

def save_json_file(filename, data):
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def is_user_banned(user_id):
    users = load_json_file(USERS_FILE)
    return users.get(str(user_id), {}).get('is_banned', False)

def mark_user_as_unavailable(user_id):
    """–ü–æ–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        users = load_json_file(USERS_FILE)
        if user_id in users:
            users[user_id]['bot_blocked'] = True
            users[user_id]['bot_blocked_at'] = datetime.now().isoformat()
            save_json_file(USERS_FILE, users)
            print(f"üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–≤—à–∏–π –±–æ—Ç–∞")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

def safe_send_message(user_id, message, parse_mode='Markdown'):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        bot.send_message(user_id, message, parse_mode=parse_mode)
        return True
    except Exception as e:
        error_message = str(e)
        
        if "chat not found" in error_message.lower():
            print(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ —É–¥–∞–ª–∏–ª —á–∞—Ç)")
            mark_user_as_unavailable(user_id)
        elif "bot was blocked by the user" in error_message.lower():
            print(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
            mark_user_as_unavailable(user_id)
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        return False

def safe_edit_message(call, text, parse_mode='Markdown', reply_markup=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ñ–æ—Ç–æ"""
    try:
        if call.message.photo:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
            bot.delete_message(call.message.chat.id, call.message.message_id)
            bot.send_message(call.message.chat.id, text, parse_mode=parse_mode, reply_markup=reply_markup)
        else:
            # –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø—Ä–æ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
            bot.edit_message_text(text, call.message.chat.id, call.message.message_id, 
                                parse_mode=parse_mode, reply_markup=reply_markup)
    except Exception as e:
        # Fallback - —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        print(f"Error in safe_edit_message: {e}")
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except:
            pass
        bot.send_message(call.message.chat.id, text, parse_mode=parse_mode, reply_markup=reply_markup)

def get_admin_chat_id():
    settings = load_json_file(ADMIN_SETTINGS_FILE)
    return settings.get('admin_chat_id', ADMIN_TELEGRAM_ID)

def get_discount_for_console(console_id):
    """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é —Å–∫–∏–¥–∫—É –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏"""
    discounts = load_json_file(DISCOUNTS_FILE)
    
    for discount_id, discount in discounts.items():
        if (discount['console_id'] == console_id and 
            discount['active'] and 
            datetime.now() >= datetime.fromisoformat(discount['start_date']) and
            datetime.now() <= datetime.fromisoformat(discount['end_date'])):
            return discount
    
    return None

def check_date_has_discount(console_id, target_date):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —Å–∫–∏–¥–∫–∞ –Ω–∞ –∫–æ–Ω—Å–æ–ª—å –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É"""
    discounts = load_json_file(DISCOUNTS_FILE)
    
    for discount_id, discount in discounts.items():
        if (discount['console_id'] == console_id and 
            discount['active'] and 
            datetime.fromisoformat(discount['start_date']).date() <= target_date and
            datetime.fromisoformat(discount['end_date']).date() >= target_date):
            return True
    
    return False

# ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –†–ï–ô–¢–ò–ù–ì–ê–ú–ò =====

def calculate_discipline_score(transactions):
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
    if not transactions:
        return 50  # –ë–∞–∑–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    
    try:
        ratings_data = load_json_file(RATINGS_FILE)
        discipline_rules = ratings_data.get('settings', {}).get('discipline_rules', {})
        window = ratings_data.get('settings', {}).get('transactions_window', 5)
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        recent_transactions = transactions[-window:]
        scores = []
        
        for transaction in recent_transactions:
            score = 100  # –ë–∞–∑–æ–≤—ã–π –±–∞–ª–ª
            
            # –í–æ–∑–≤—Ä–∞—Ç –≤–æ–≤—Ä–µ–º—è
            return_timing = transaction.get('return_timing', 'on_time')
            timing_bonus = discipline_rules.get('return_timing', {}).get(return_timing, 0)
            score += timing_bonus
            
            # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–º—É—â–µ—Å—Ç–≤–∞
            item_condition = transaction.get('item_condition', 'perfect')
            condition_bonus = discipline_rules.get('item_condition', {}).get(item_condition, 0)
            score += condition_bonus
            
            # –°–æ–±–ª—é–¥–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª
            rule_compliance = transaction.get('rule_compliance', 'no_violations')
            compliance_bonus = discipline_rules.get('rule_compliance', {}).get(rule_compliance, 0)
            score += compliance_bonus
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω 0-100
            score = max(0, min(100, score))
            scores.append(score)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        return round(sum(scores) / len(scores))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã: {e}")
        return 50

def calculate_loyalty_score(user_id, user_data):
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ª–æ—è–ª—å–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        ratings_data = load_json_file(RATINGS_FILE)
        loyalty_rules = ratings_data.get('settings', {}).get('loyalty_rules', {})
        
        score = 0
        
        # –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã
        rentals = load_json_file(RENTALS_FILE)
        user_rentals = [r for r in rentals.values() if r.get('user_id') == user_id]
        rental_count = len(user_rentals)
        
        repeat_bonus = min(rental_count * loyalty_rules.get('repeat_rentals', {}).get('bonus_per_rental', 5),
                          loyalty_rules.get('repeat_rentals', {}).get('max_bonus', 30))
        score += repeat_bonus
        
        # –£—á–∞—Å—Ç–∏–µ –≤ –∞–∫—Ü–∏—è—Ö (–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        if user_data.get('promotion_participation', False):
            score += loyalty_rules.get('promotion_participation', 10)
        
        # –°—Ä–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞
        if 'joined_at' in user_data:
            join_date = datetime.fromisoformat(user_data['joined_at'])
            tenure_days = (datetime.now() - join_date).days
            
            tenure_bonus = 0
            if tenure_days >= 365:  # 12+ –º–µ—Å—è—Ü–µ–≤
                tenure_bonus = loyalty_rules.get('tenure_bonus', {}).get('12_months', 20)
            elif tenure_days >= 180:  # 6+ –º–µ—Å—è—Ü–µ–≤
                tenure_bonus = loyalty_rules.get('tenure_bonus', {}).get('6_months', 10)
            
            score += tenure_bonus
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
        score += user_data.get('loyalty_bonus', 0)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω 0-100
        return max(0, min(100, score))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏: {e}")
        return 0

def add_rating_transaction(user_id, transaction_type, points, comment):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    import json
    import datetime
    
    try:
        ratings_data = load_json_file(RATINGS_FILE)
        
        if 'transactions' not in ratings_data:
            ratings_data['transactions'] = {}
        if user_id not in ratings_data['transactions']:
            ratings_data['transactions'][user_id] = []
        
        transaction = {
            'type': transaction_type,
            'points': points,
            'comment': comment,
            'date': datetime.datetime.now().isoformat(),
            'auto_generated': True
        }
        
        ratings_data['transactions'][user_id].append(transaction)
        
        with open(RATINGS_FILE, 'w', encoding='utf-8') as f:
            json.dump(ratings_data, f, ensure_ascii=False, indent=2)
        
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
        return False

def update_rating_on_rental_completion(user_id, rental_data, return_condition='perfect', on_time=True):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞—Ä–µ–Ω–¥—ã"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–ª—ã –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å–ª–æ–≤–∏–π –≤–æ–∑–≤—Ä–∞—Ç–∞
    if on_time:
        add_rating_transaction(user_id, 'return_timing', 10, '–í–æ–∑–≤—Ä–∞—Ç –≤–æ–≤—Ä–µ–º—è')
    else:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —à—Ç—Ä–∞—Ñ–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–¥–µ—Ä–∂–∫–∏
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
        add_rating_transaction(user_id, 'return_timing', -20, '–û–ø–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ')
    
    # –ë–∞–ª–ª—ã –∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
    if return_condition == 'perfect':
        add_rating_transaction(user_id, 'item_condition', 10, '–û—Ç–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ')
    elif return_condition == 'minor_defects':
        add_rating_transaction(user_id, 'item_condition', -15, '–ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è')
    elif return_condition == 'major_defects':
        add_rating_transaction(user_id, 'item_condition', -30, '–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è')
    
    # –ë–æ–Ω—É—Å –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∞—Ä–µ–Ω–¥—É
    try:
        rentals = load_json_file(RENTALS_FILE)
        user_rentals = [r for r in rentals.values() if r['user_id'] == user_id and r['status'] == 'completed']
        
        if len(user_rentals) >= 2:  # –ù–µ –ø–µ—Ä–≤–∞—è –∞—Ä–µ–Ω–¥–∞
            add_rating_transaction(user_id, 'repeat_rental', 5, f'–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞—Ä–µ–Ω–¥–∞ #{len(user_rentals)}')
    except:
        pass

def calculate_user_final_rating(user_id):
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        ratings_data = load_json_file(RATINGS_FILE)
        settings = ratings_data.get('settings', {})
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        users = load_json_file(USERS_FILE)
        if user_id not in users:
            return None
        
        user_data = users[user_id]
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_transactions = ratings_data.get('transactions', {}).get(user_id, [])
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        discipline = calculate_discipline_score(user_transactions)
        loyalty = calculate_loyalty_score(user_id, user_data)
        
        # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥
        discipline_weight = settings.get('discipline_weight', 0.6)
        loyalty_weight = settings.get('loyalty_weight', 0.4)
        
        final_score = round(discipline * discipline_weight + loyalty * loyalty_weight)
        final_score = max(0, min(100, final_score))
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        thresholds = settings.get('status_thresholds', {})
        if final_score >= thresholds.get('premium', 80):
            status = 'premium'
            status_name = 'Premium ‚≠ê'
        elif final_score >= thresholds.get('regular', 50):
            status = 'regular'
            status_name = '–û–±—ã—á–Ω—ã–π üë§'
        else:
            status = 'risk'
            status_name = '–†–∏—Å–∫ ‚ö†Ô∏è'
        
        return {
            'user_id': user_id,
            'final_score': final_score,
            'discipline': discipline,
            'loyalty': loyalty,
            'status': status,
            'status_name': status_name,
            'calculated_at': datetime.now().isoformat()
        }
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞: {e}")
        return None

def get_user_status_benefits(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å –ª—å–≥–æ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ —Å—Ç–∞—Ç—É—Å—É"""
    try:
        rating = calculate_user_final_rating(user_id)
        if not rating:
            return {
                'discount_percent': 0,
                'deposit_multiplier': 1.0,
                'priority_support': False,
                'advance_booking_days': 30
            }
        
        status = rating['status']
        benefits = {
            'premium': {
                'discount_percent': 10,
                'deposit_multiplier': 0.8,
                'priority_support': True,
                'advance_booking_days': 45
            },
            'regular': {
                'discount_percent': 0,
                'deposit_multiplier': 1.0,
                'priority_support': False,
                'advance_booking_days': 30
            },
            'risk': {
                'discount_percent': 0,
                'deposit_multiplier': 1.5,
                'priority_support': False,
                'advance_booking_days': 7
            }
        }
        
        return benefits.get(status, benefits['regular'])
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª—å–≥–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return {
            'discount_percent': 0,
            'deposit_multiplier': 1.0,
            'priority_support': False,
            'advance_booking_days': 30
        }

def create_temp_reservation(user_id, console_id, timeout_minutes=30):
    """–°–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—é –∫–æ–Ω—Å–æ–ª–∏"""
    reservations = load_json_file(TEMP_RESERVATIONS_FILE)
    reservation_id = str(uuid.uuid4())
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for res_id, res in list(reservations.items()):
        if res['user_id'] == user_id:
            del reservations[res_id]
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—é
    expiry_time = datetime.now() + timedelta(minutes=timeout_minutes)
    reservations[reservation_id] = {
        'user_id': user_id,
        'console_id': console_id,
        'created_at': datetime.now().isoformat(),
        'expires_at': expiry_time.isoformat(),
        'status': 'active'
    }
    
    save_json_file(TEMP_RESERVATIONS_FILE, reservations)
    return reservation_id

def remove_temp_reservation(user_id):
    """–£–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    reservations = load_json_file(TEMP_RESERVATIONS_FILE)
    for res_id, res in list(reservations.items()):
        if res['user_id'] == user_id:
            del reservations[res_id]
    save_json_file(TEMP_RESERVATIONS_FILE, reservations)

def cleanup_expired_reservations():
    """–£–¥–∞–ª–∏—Ç—å –∏—Å—Ç—ë–∫—à–∏–µ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏"""
    reservations = load_json_file(TEMP_RESERVATIONS_FILE)
    now = datetime.now()
    
    for res_id, res in list(reservations.items()):
        if datetime.fromisoformat(res['expires_at']) < now:
            del reservations[res_id]
    
    save_json_file(TEMP_RESERVATIONS_FILE, reservations)

def is_console_temp_reserved(console_id, exclude_user_id=None):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–Ω—è—Ç–∞ –ª–∏ –∫–æ–Ω—Å–æ–ª—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–µ–π"""
    cleanup_expired_reservations()
    reservations = load_json_file(TEMP_RESERVATIONS_FILE)
    
    for res_id, res in reservations.items():
        if (res['console_id'] == console_id and 
            res['status'] == 'active' and 
            res['user_id'] != exclude_user_id):
            return True, res['user_id']
    
    return False, None

def calculate_discounted_price(console_id, original_price, duration_hours):
    """–í—ã—á–∏—Å–ª–∏—Ç—å —Ü–µ–Ω—É —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏"""
    discount = get_discount_for_console(console_id)
    
    if not discount:
        return original_price, 0, None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Å–∫–∏–¥–∫–∏
    if duration_hours < discount.get('min_hours', 0):
        return original_price, 0, None
    
    if discount['type'] == 'percentage':
        discount_amount = original_price * (discount['value'] / 100)
        discounted_price = original_price - discount_amount
    elif discount['type'] == 'fixed':
        discount_amount = min(discount['value'], original_price)  # –°–∫–∏–¥–∫–∞ –Ω–µ –±–æ–ª—å—à–µ —Å–∞–º–æ–π —Ü–µ–Ω—ã
        discounted_price = original_price - discount_amount
    else:
        return original_price, 0, None
    
    # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –±–ª–∏–∂–∞–π—à–∏—Ö –ª–µ–π
    discounted_price = max(0, round(discounted_price))
    discount_amount = round(discount_amount)
    
    return discounted_price, discount_amount, discount

def get_console_photo_path_bot(console_id, console_data=None):
    """–ü–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ –∫–æ–Ω—Å–æ–ª–∏ –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Å–æ–ª–∏ –∏ –≤ –Ω–µ–π –µ—Å—Ç—å photo_path, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if console_data and console_data.get('photo_path'):
        photo_path = console_data['photo_path']
        local_path = photo_path.replace('/static/', 'static/')
        if os.path.exists(local_path):
            return local_path
    
    # –ò–Ω–∞—á–µ –∏—â–µ–º –ø–æ ID –∫–æ–Ω—Å–æ–ª–∏
    console_images_dir = os.path.join('static', 'img', 'console')
    allowed_extensions = ['png', 'jpg', 'jpeg', 'gif', 'webp']
    
    for ext in allowed_extensions:
        file_path = os.path.join(console_images_dir, f"{console_id}.{ext}")
        if os.path.exists(file_path):
            return file_path
    return None

def is_approval_required():
    settings = load_json_file(ADMIN_SETTINGS_FILE)
    return settings.get('require_approval', True)

def get_console_rental_info(console_id):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω–æ–π –∞—Ä–µ–Ω–¥–µ –∫–æ–Ω—Å–æ–ª–∏"""
    rentals = load_json_file(RENTALS_FILE)
    users = load_json_file(USERS_FILE)
    
    for rental_id, rental in rentals.items():
        if rental['console_id'] == console_id and rental['status'] == 'active':
            start_time = datetime.fromisoformat(rental['start_time'])
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –∞—Ä–µ–Ω–¥—É –Ω–∞ 1 –¥–µ–Ω—å (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)
            estimated_end_time = start_time + timedelta(days=1)
            user = users.get(rental['user_id'], {})
            return {
                'start_time': start_time,
                'estimated_end_time': estimated_end_time,
                'user_name': user.get('full_name', user.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')),
                'rental_id': rental_id
            }
    return None

def notify_admin(message):
    try:
        admin_id = get_admin_chat_id()
        print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {message[:100]}...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ parse_mode —Å–Ω–∞—á–∞–ª–∞, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - —Å HTML
        try:
            bot.send_message(admin_id, message, parse_mode='Markdown')
            print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å Markdown, –ø—Ä–æ–±—É–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
            bot.send_message(admin_id, message)
            print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    except Exception as e:
        print(f"‚ùå –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
        print(f"Admin ID: {get_admin_chat_id()}")
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        try:
            settings = load_json_file(ADMIN_SETTINGS_FILE)
            print(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∞: {settings}")
            if not settings.get('notifications_enabled', True):
                print("‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!")
        except Exception as settings_error:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–¥–º–∏–Ω–∞: {settings_error}")

def notify_user_about_approval(user_id, console_id, rental_id):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    try:
        consoles = load_json_file(CONSOLES_FILE)
        rentals = load_json_file(RENTALS_FILE)
        console = consoles.get(console_id, {})
        rental = rentals.get(rental_id, {})
        
        user_message = f"‚úÖ **–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!**\n\n"
        user_message += f"üéÆ –ö–æ–Ω—Å–æ–ª—å: {console.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–Ω—Å–æ–ª—å')}\n"
        user_message += f"üí∞ –¶–µ–Ω–∞: {console.get('rental_price', 0)} –ª–µ–π/—á–∞—Å\n"
        
        selected_hours = rental.get('selected_hours')
        if selected_hours:
            selected_days = selected_hours // 24
            if selected_days == 1:
                user_message += f"‚è∞ –í—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã: {selected_days} –¥–µ–Ω—å\n"
            elif selected_days in [2, 3, 4]:
                user_message += f"‚è∞ –í—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã: {selected_days} –¥–Ω—è\n"
            else:
                user_message += f"‚è∞ –í—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã: {selected_days} –¥–Ω–µ–π\n"
            user_message += f"üíµ –ö –æ–ø–ª–∞—Ç–µ: {rental.get('expected_cost', 0)} –ª–µ–π\n"
            expected_end = rental.get('expected_end_time')
            if expected_end:
                user_message += f"üïê –û–∫–æ–Ω—á–∞–Ω–∏–µ: {datetime.fromisoformat(expected_end).strftime('%Y-%m-%d %H:%M')}\n"
        
        user_message += f"üÜî ID –∞—Ä–µ–Ω–¥—ã: `{rental_id}`\n\n"
        user_message += f"–ê—Ä–µ–Ω–¥–∞ –Ω–∞—á–∞–ª–∞—Å—å! –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /end {rental_id}"
        
        bot.send_message(user_id, user_message, parse_mode='Markdown')
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏: {e}")

def notify_user_about_rejection(user_id, console_id):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    try:
        consoles = load_json_file(CONSOLES_FILE)
        console = consoles.get(console_id, {})
        
        user_message = f"‚ùå **–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º**\n\n"
        user_message += f"üéÆ –ö–æ–Ω—Å–æ–ª—å: {console.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–Ω—Å–æ–ª—å')}\n"
        user_message += f"‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M')}\n\n"
        user_message += f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –¥—Ä—É–≥—É—é –∫–æ–Ω—Å–æ–ª—å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        
        bot.send_message(user_id, user_message, parse_mode='Markdown')
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏: {e}")

def notify_user_about_rental_end(user_id, console_id, total_cost, hours):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞—Ä–µ–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    try:
        consoles = load_json_file(CONSOLES_FILE)
        console = consoles.get(console_id, {})
        
        user_message = f"üèÅ **–ê—Ä–µ–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º**\n\n"
        user_message += f"üéÆ –ö–æ–Ω—Å–æ–ª—å: {console.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–Ω—Å–æ–ª—å')}\n"
        user_message += f"‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {hours} —á–∞—Å–æ–≤\n"
        user_message += f"üí∞ –ö –æ–ø–ª–∞—Ç–µ: {total_cost} –ª–µ–π\n\n"
        user_message += f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞! üéÆ"
        
        if safe_send_message(user_id, user_message):
            print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

def create_rental(user_id, console_id, call=None, location=None):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∞—Ä–µ–Ω–¥—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    rentals = load_json_file(RENTALS_FILE)
    consoles = load_json_file(CONSOLES_FILE)
    
    rental_id = str(uuid.uuid4())
    rental = {
        'id': rental_id,
        'user_id': str(user_id),
        'console_id': console_id,
        'start_time': datetime.now().isoformat(),
        'end_time': None,
        'status': 'active',
        'total_cost': 0
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞
    if location:
        rental['location'] = location
    
    rentals[rental_id] = rental
    consoles[console_id]['status'] = 'rented'
    
    save_json_file(RENTALS_FILE, rentals)
    save_json_file(CONSOLES_FILE, consoles)
    
    return rental_id

def create_user_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    keyboard.add(
        types.KeyboardButton('üìä –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç'),
        types.KeyboardButton('üìù –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å')
    )
    keyboard.add(
        types.KeyboardButton('‚ÑπÔ∏è –ü–æ–º–æ—â—å')
    )
    return keyboard

def create_admin_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    keyboard.add(
        types.KeyboardButton('‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å'),
        types.KeyboardButton('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
    )
    keyboard.add(
        types.KeyboardButton('üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'),
        types.KeyboardButton('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
    )
    keyboard.add(
        types.KeyboardButton('üìù –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å'),
        types.KeyboardButton('‚ÑπÔ∏è –ü–æ–º–æ—â—å')
    )
    return keyboard

def create_main_keyboard():
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    return create_user_keyboard()

def is_user_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    admin_id = get_admin_chat_id()
    return str(user_id) == str(admin_id)

def is_user_registered(user_id):
    users = load_json_file(USERS_FILE)
    user = users.get(str(user_id), {})
    return user.get('phone_number') and user.get('full_name')

def get_keyboard_for_user(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if is_user_admin(user_id):
        return create_admin_keyboard()
    else:
        return create_user_keyboard()

def check_user_documents(user_full_name, user_id):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    safe_name = "".join(c for c in user_full_name if c.isalnum() or c in (' ', '-', '_')).rstrip()
    user_folder = os.path.join(PASSPORT_DIR, safe_name)
    
    documents = {
        'passport_front': False,
        'passport_back': False,
        'selfie_with_passport': False
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not os.path.exists(user_folder):
        return documents
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for doc_type in documents.keys():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        for ext in ['jpg', 'jpeg', 'png', 'webp']:
            filename = f"{doc_type}.{ext}"
            filepath = os.path.join(user_folder, filename)
            if os.path.exists(filepath):
                documents[doc_type] = os.path.join(safe_name, filename)
                break
    
    return documents

def save_photo_document(file_id, user_full_name, document_type):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        file_info = bot.get_file(file_id)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        downloaded_file = bot.download_file(file_info.file_path)
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        safe_name = "".join(c for c in user_full_name if c.isalnum() or c in (' ', '-', '_')).rstrip()
        user_folder = os.path.join(PASSPORT_DIR, safe_name)
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if not os.path.exists(user_folder):
            os.makedirs(user_folder)
        
        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        file_extension = file_info.file_path.split('.')[-1] if '.' in file_info.file_path else 'jpg'
        filename = f"{document_type}.{file_extension}"
        filepath = os.path.join(user_folder, filename)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        with open(filepath, 'wb') as new_file:
            new_file.write(downloaded_file)
        
        return {
            'success': True,
            'filepath': filepath,
            'filename': os.path.join(safe_name, filename),
            'user_folder': safe_name
        }
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ: {e}")
        return {
            'success': False,
            'error': str(e)
        }


@bot.message_handler(commands=['start'])
def start_command(message):
    user_id = str(message.from_user.id)
    users = load_json_file(USERS_FILE)
    
    if is_user_banned(user_id):
        bot.reply_to(message, "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    if user_id not in users or not is_user_registered(user_id):
        if user_id not in users:
            users[user_id] = {
                'id': user_id,
                'username': message.from_user.username,
                'first_name': message.from_user.first_name,
                'last_name': message.from_user.last_name,
                'is_banned': False,
                'rentals': [],
                'total_spent': 0,
                'joined_at': datetime.now().isoformat(),
                'phone_number': None,
                'full_name': None,
                'registration_step': 'phone'
            }
            save_json_file(USERS_FILE, users)
        
        # –ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        phone_button = types.KeyboardButton('üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', request_contact=True)
        markup.add(phone_button)
        
        bot.reply_to(message, 
                    f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∞—Ä–µ–Ω–¥—ã PlayStation!\n\n"
                    f"–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
                    reply_markup=markup)
        return
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    welcome_text = f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {users[user_id]['full_name']}!"
    keyboard = get_keyboard_for_user(user_id)
    bot.reply_to(message, welcome_text + "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

@bot.message_handler(content_types=['contact'])
def handle_contact(message):
    user_id = str(message.from_user.id)
    users = load_json_file(USERS_FILE)
    
    if user_id in users and message.contact.user_id == message.from_user.id:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        users[user_id]['phone_number'] = message.contact.phone_number
        users[user_id]['registration_step'] = 'full_name'
        save_json_file(USERS_FILE, users)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –§–ò–û
        markup = types.ReplyKeyboardRemove()
        bot.reply_to(message, 
                    f"‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {message.contact.phone_number}\n\n"
                    f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –§–ò–û:",
                    reply_markup=markup)
    else:
        bot.reply_to(message, "‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")

@bot.message_handler(content_types=['location'])
def handle_location(message):
    user_id = str(message.from_user.id)
    users = load_json_file(USERS_FILE)
    user = users.get(user_id, {})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ç–∞–ø –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    verification_step = user.get('verification_step')
    
    # –ò—â–µ–º –æ–¥–æ–±—Ä–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    rental_requests = load_json_file(RENTAL_REQUESTS_FILE)
    approved_request = None
    
    for request_id, request in rental_requests.items():
        if request['user_id'] == user_id and request['status'] == 'approved':
            approved_request = request
            break
    
    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –æ–¥–æ–±—Ä–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞ –∏ –æ–Ω –ø—Ä–æ—à–µ–ª –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    if approved_request and verification_step == 'location_request':
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –∞—Ä–µ–Ω–¥—ã
        console_id = approved_request['console_id']
        location_data = {
            'latitude': message.location.latitude,
            'longitude': message.location.longitude
        }
        rental_id = create_rental(user_id, console_id, location=location_data)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é
        approved_request['status'] = 'completed'
        approved_request['rental_id'] = rental_id
        save_json_file(RENTAL_REQUESTS_FILE, rental_requests)
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–¥–∞–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—é
        users[user_id]['verification_step'] = 'completed'
        remove_temp_reservation(user_id)
        save_json_file(USERS_FILE, users)
        
        consoles = load_json_file(CONSOLES_FILE)
        console = consoles[console_id]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        response = f"‚úÖ **–ê—Ä–µ–Ω–¥–∞ –Ω–∞—á–∞–ª–∞—Å—å!**\n\n"
        response += f"üéÆ –ö–æ–Ω—Å–æ–ª—å: {console['name']}\n"
        response += f"üí∞ –¶–µ–Ω–∞: {console['rental_price']} –ª–µ–π/—á–∞—Å\n"
        response += f"üÜî ID –∞—Ä–µ–Ω–¥—ã: `{rental_id}`\n"
        response += f"üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞\n"
        response += f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã\n"
        response += f"‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M')}\n\n"
        response += f"–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—Ä–µ–Ω–¥—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /end {rental_id}"
        
        bot.reply_to(message, response, parse_mode='Markdown', reply_markup=get_keyboard_for_user(user_id))
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–∞—á–∞–ª–µ –∞—Ä–µ–Ω–¥—ã
        admin_message = f"üéÆ **–ê—Ä–µ–Ω–¥–∞ –Ω–∞—á–∞–ª–∞—Å—å (—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)**\n\n"
        admin_message += f"üë§ {user.get('full_name', user.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'))}\n"
        admin_message += f"üì± {user.get('phone_number', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        admin_message += f"üéÆ {console['name']}\n"
        admin_message += f"üí∞ {console['rental_price']} –ª–µ–π/—á–∞—Å\n"
        admin_message += f"üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è: {message.location.latitude}, {message.location.longitude}\n"
        admin_message += f"üÜî ID –∞—Ä–µ–Ω–¥—ã: `{rental_id}`\n\n"
        admin_message += f"üìÑ **–î–æ–∫—É–º–µ–Ω—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:**\n"
        admin_message += f"‚Ä¢ –ü–∞—Å–ø–æ—Ä—Ç (–ª–∏—Ü–æ): {user.get('passport_front_file', '–ù–µ –Ω–∞–π–¥–µ–Ω')}\n"
        admin_message += f"‚Ä¢ –ü–∞—Å–ø–æ—Ä—Ç (–æ–±–æ—Ä–æ—Ç): {user.get('passport_back_file', '–ù–µ –Ω–∞–π–¥–µ–Ω')}\n"
        admin_message += f"‚Ä¢ –°–µ–ª—Ñ–∏ —Å –ø–∞—Å–ø–æ—Ä—Ç–æ–º: {user.get('selfie_file', '–ù–µ –Ω–∞–π–¥–µ–Ω')}\n\n"
        admin_message += f"‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M')}"
        
        notify_admin(admin_message)
    else:
        # –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        response = f"üìç **–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É**\n\n"
        response += f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M')}\n"
        response += f"üìç –®–∏—Ä–æ—Ç–∞: {message.location.latitude}\n"
        response += f"üìç –î–æ–ª–≥–æ—Ç–∞: {message.location.longitude}"
        
        bot.reply_to(message, response, parse_mode='Markdown', reply_markup=get_keyboard_for_user(user_id))
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        admin_message = f"üìç **–ü–æ–ª—É—á–µ–Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
        admin_message += f"üë§ {user.get('full_name', user.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'))}\n"
        admin_message += f"üì± {user.get('phone_number', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        admin_message += f"üÜî ID: `{user_id}`\n"
        admin_message += f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {message.location.latitude}, {message.location.longitude}\n"
        admin_message += f"‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M')}\n\n"
        admin_message += f"[–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ](https://www.google.com/maps?q={message.location.latitude},{message.location.longitude})"
        
        notify_admin(admin_message)

@bot.message_handler(content_types=['photo'])
def handle_photo_document(message):
    user_id = str(message.from_user.id)
    users = load_json_file(USERS_FILE)
    
    if user_id not in users:
        bot.reply_to(message, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ /start")
        return
    
    user = users[user_id]
    verification_step = user.get('verification_step')
    
    if not verification_step or verification_step not in ['passport_front', 'passport_back', 'selfie_with_passport']:
        bot.reply_to(message, "ü§î –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.", reply_markup=get_keyboard_for_user(user_id))
        return
    
    if is_user_banned(user_id):
        bot.reply_to(message, "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        return
    
    user_full_name = user.get('full_name', user.get('first_name', f'user_{user_id}'))
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∏–±–æ–ª—å—à–µ–µ —Ñ–æ—Ç–æ
    photo = message.photo[-1]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
    document_types = {
        'passport_front': 'passport_front',
        'passport_back': 'passport_back', 
        'selfie_with_passport': 'selfie_with_passport'
    }
    
    document_type = document_types.get(verification_step)
    if not document_type:
        bot.reply_to(message, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
    result = save_photo_document(photo.file_id, user_full_name, document_type)
    
    if not result['success']:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ: {result['error']}")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if verification_step == 'passport_front':
        users[user_id]['verification_step'] = 'passport_back'
        users[user_id]['passport_front_file'] = result['filename']
        
        response = f"‚úÖ **–§–æ—Ç–æ –ø–µ—Ä–µ–¥–Ω–µ–π —Å—Ç–æ—Ä–æ–Ω—ã –ø–∞—Å–ø–æ—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!**\n\n"
        response += f"**–®–∞–≥ 2 –∏–∑ 3:** –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ **–ó–ê–î–ù–ï–ô —Å—Ç–æ—Ä–æ–Ω—ã –ø–∞—Å–ø–æ—Ä—Ç–∞**\n\n"
        response += f"‚ö†Ô∏è **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ç–æ:**\n"
        response += f"‚Ä¢ –ß–µ—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ –±–ª–∏–∫–æ–≤\n"
        response += f"‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Ç–∞–µ–º—ã–º–∏\n"
        response += f"‚Ä¢ –§–æ—Ç–æ —Ü–µ–ª–∏–∫–æ–º, –±–µ–∑ –æ–±—Ä–µ–∑–∞–Ω–Ω—ã—Ö –∫—Ä–∞–µ–≤\n\n"
        response += f"üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
        
    elif verification_step == 'passport_back':
        users[user_id]['verification_step'] = 'selfie_with_passport'
        users[user_id]['passport_back_file'] = result['filename']
        
        response = f"‚úÖ **–§–æ—Ç–æ –∑–∞–¥–Ω–µ–π —Å—Ç–æ—Ä–æ–Ω—ã –ø–∞—Å–ø–æ—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!**\n\n"
        response += f"**–®–∞–≥ 3 –∏–∑ 3:** –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ **–°–ï–õ–§–ò —Å –ø–∞—Å–ø–æ—Ä—Ç–æ–º**\n\n"
        response += f"‚ö†Ô∏è **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–µ–ª—Ñ–∏:**\n"
        response += f"‚Ä¢ –í–∞—à–µ –ª–∏—Ü–æ –∏ –ø–∞—Å–ø–æ—Ä—Ç –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–µ—Ç–∫–æ –≤–∏–¥–Ω—ã\n"
        response += f"‚Ä¢ –î–µ—Ä–∂–∏—Ç–µ –ø–∞—Å–ø–æ—Ä—Ç –æ—Ç–∫—Ä—ã—Ç—ã–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å —Ñ–æ—Ç–æ\n"
        response += f"‚Ä¢ –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ\n"
        response += f"‚Ä¢ –°–º–æ—Ç—Ä–∏—Ç–µ –≤ –∫–∞–º–µ—Ä—É\n\n"
        response += f"üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–µ–ª—Ñ–∏ –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
        
    elif verification_step == 'selfie_with_passport':
        users[user_id]['verification_step'] = 'location_request'
        users[user_id]['selfie_file'] = result['filename']
        
        response = f"‚úÖ **–°–µ–ª—Ñ–∏ —Å –ø–∞—Å–ø–æ—Ä—Ç–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!**\n\n"
        response += f"üéâ **–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
        response += f"üìç **–§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥:** –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞—Ä–µ–Ω–¥—ã\n\n"
        response += f"‚ö†Ô∏è **–í–ê–ñ–ù–û:** –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å–æ–ª—å!\n"
        response += f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        location_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        location_button = types.KeyboardButton('üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é', request_location=True)
        location_markup.add(location_button)
        
        bot.reply_to(message, response, parse_mode='Markdown', reply_markup=location_markup)
        save_json_file(USERS_FILE, users)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        admin_message = f"üìÑ **–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞**\n\n"
        admin_message += f"üë§ {user_full_name}\n"
        admin_message += f"üì± {user.get('phone_number', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        admin_message += f"üÜî ID: `{user_id}`\n\n"
        admin_message += f"üìÅ **–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:**\n"
        admin_message += f"‚Ä¢ –ü–∞—Å–ø–æ—Ä—Ç (–ª–∏—Ü–æ): {users[user_id].get('passport_front_file', '–ù–µ –Ω–∞–π–¥–µ–Ω')}\n"
        admin_message += f"‚Ä¢ –ü–∞—Å–ø–æ—Ä—Ç (–æ–±–æ—Ä–æ—Ç): {users[user_id].get('passport_back_file', '–ù–µ –Ω–∞–π–¥–µ–Ω')}\n"
        admin_message += f"‚Ä¢ –°–µ–ª—Ñ–∏ —Å –ø–∞—Å–ø–æ—Ä—Ç–æ–º: {result['filename']}\n\n"
        admin_message += f"‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞—Ä–µ–Ω–¥—ã"
        
        notify_admin(admin_message)
        return
    
    save_json_file(USERS_FILE, users)
    bot.reply_to(message, response, parse_mode='Markdown')
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    step_names = {
        'passport_front': '—Ñ–æ—Ç–æ –ø–µ—Ä–µ–¥–Ω–µ–π —Å—Ç–æ—Ä–æ–Ω—ã –ø–∞—Å–ø–æ—Ä—Ç–∞',
        'passport_back': '—Ñ–æ—Ç–æ –∑–∞–¥–Ω–µ–π —Å—Ç–æ—Ä–æ–Ω—ã –ø–∞—Å–ø–æ—Ä—Ç–∞',
        'selfie_with_passport': '—Å–µ–ª—Ñ–∏ —Å –ø–∞—Å–ø–æ—Ä—Ç–æ–º'
    }
    
    admin_message = f"üìÑ **–ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç**\n\n"
    admin_message += f"üë§ {user_full_name}\n"
    admin_message += f"üì± {user.get('phone_number', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    admin_message += f"üÜî ID: `{user_id}`\n"
    admin_message += f"üìÅ –¢–∏–ø: {step_names.get(verification_step, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}\n"
    admin_message += f"üíæ –§–∞–π–ª: {result['filename']}\n"
    admin_message += f"‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M')}"
    
    notify_admin(admin_message)

@bot.message_handler(func=lambda message: message.content_type == 'text' and 
                     message.from_user.id and 
                     str(message.from_user.id) in load_json_file(USERS_FILE) and 
                     load_json_file(USERS_FILE)[str(message.from_user.id)].get('registration_step') == 'full_name')
def handle_full_name(message):
    user_id = str(message.from_user.id)
    users = load_json_file(USERS_FILE)
    
    if user_id in users:
        full_name = message.text.strip()
        
        if len(full_name) < 2:
            bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)")
            return
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        users[user_id]['full_name'] = full_name
        users[user_id]['registration_step'] = 'completed'
        save_json_file(USERS_FILE, users)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = get_keyboard_for_user(user_id)
        bot.reply_to(message, 
                    f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                    f"üë§ –§–ò–û: {full_name}\n"
                    f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {users[user_id]['phone_number']}\n\n"
                    f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∞—Ä–µ–Ω–¥—ã PlayStation –∫–æ–Ω—Å–æ–ª–µ–π!\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=keyboard)

@bot.message_handler(func=lambda message: message.text == '–ö–æ–Ω—Å–æ–ª–∏')
def list_consoles(message):
    user_id = str(message.from_user.id)
    
    if is_user_banned(user_id):
        bot.reply_to(message, "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        return
    
    if not is_user_registered(user_id):
        bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
        return
    
    consoles = load_json_file(CONSOLES_FILE)
    
    if not consoles:
        bot.reply_to(message, "üì≠ –ö–æ–Ω—Å–æ–ª–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã", reply_markup=get_keyboard_for_user(user_id))
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–æ—Ç–æ
    settings = load_json_file(ADMIN_SETTINGS_FILE)
    show_photos = settings.get('show_console_photos', True)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω–æ
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Å–æ–ª–∏ —Å —Ñ–æ—Ç–æ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞
    for console_id, console in consoles.items():
        status_emoji = "‚úÖ" if console['status'] == 'available' else "üî¥"
        games_text = ", ".join(console['games'][:3])
        if len(console['games']) > 3:
            games_text += f" –∏ –µ—â–µ {len(console['games']) - 3}"
        
        caption = f"{status_emoji} **{console['name']}** ({console['model']})\n"
        caption += f"üí∞ –ê—Ä–µ–Ω–¥–∞: {console['rental_price']} –ª–µ–π/—á–∞—Å\n"
        
        if console.get('sale_price', 0) > 0:
            caption += f"üè∑Ô∏è –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: {console['sale_price']} –ª–µ–π\n"
        
        if console['games']:
            caption += f"üéØ –ò–≥—Ä—ã: {games_text}\n"
        
        caption += f"üÜî ID: `{console_id}`\n"
        caption += f"üìä –°—Ç–∞—Ç—É—Å: {'–î–æ—Å—Ç—É–ø–Ω–∞' if console['status'] == 'available' else '–ê—Ä–µ–Ω–¥–æ–≤–∞–Ω–∞'}\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–æ—Ç–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ò –¥–ª—è —ç—Ç–æ–π –∫–æ–Ω—Å–æ–ª–∏
        console_photo_enabled = console.get('show_photo_in_bot', True)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω–æ
        
        if show_photos and console_photo_enabled:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —Ñ–æ—Ç–æ
                photo_path = get_console_photo_path_bot(console_id, console)
                
                if photo_path:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ
                    with open(photo_path, 'rb') as photo_file:
                        bot.send_photo(
                            message.chat.id, 
                            photo_file, 
                            caption=caption, 
                            parse_mode='Markdown'
                        )
                elif console.get('photo_id'):
                    # –°—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞ - Telegram file_id (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
                    bot.send_photo(
                        message.chat.id, 
                        console['photo_id'], 
                        caption=caption, 
                        parse_mode='Markdown'
                    )
                else:
                    # –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    bot.send_message(message.chat.id, caption, parse_mode='Markdown')
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –∫–æ–Ω—Å–æ–ª–∏ {console_id}: {e}")
                # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                bot.send_message(message.chat.id, caption, parse_mode='Markdown')
        else:
            # –ë–µ–∑ —Ñ–æ—Ç–æ (–æ—Ç–∫–ª—é—á–µ–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–æ –∏–ª–∏ –¥–ª—è —ç—Ç–æ–π –∫–æ–Ω—Å–æ–ª–∏)
            bot.send_message(message.chat.id, caption, parse_mode='Markdown')
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∫–æ–Ω—Ü–µ
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_keyboard_for_user(user_id))

@bot.message_handler(func=lambda message: message.text == 'üìä –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç')
def user_profile(message):
    user_id = str(message.from_user.id)
    
    if is_user_banned(user_id):
        bot.reply_to(message, "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        return
    
    if not is_user_registered(user_id):
        bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
        return
    
    users = load_json_file(USERS_FILE)
    rentals = load_json_file(RENTALS_FILE)
    
    if user_id not in users:
        bot.reply_to(message, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ /start")
        return
    
    user = users[user_id]
    user_rentals = [r for r in rentals.values() if r['user_id'] == user_id]
    active_rentals = [r for r in user_rentals if r['status'] == 'active']
    
    response = f"üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:**\n\n"
    response += f"üÜî ID: `{user_id}`\n"
    response += f"üë§ –§–ò–û: {user.get('full_name', user['first_name'])}\n"
    response += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.get('phone_number', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    
    if user.get('username'):
        response += f"üìû Username: @{user['username']}\n"
    
    response += f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user['joined_at'][:10]}\n"
    response += f"üìä –í—Å–µ–≥–æ –∞—Ä–µ–Ω–¥: {len(user_rentals)}\n"
    response += f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {user.get('total_spent', 0)} –ª–µ–π\n"
    response += f"üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥: {len(active_rentals)}\n"
    
    # –†–µ–π—Ç–∏–Ω–≥ —Å–∫—Ä—ã—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏)
    
    if active_rentals:
        response += "\n**–ê–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã:**\n"
        consoles = load_json_file(CONSOLES_FILE)
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—Ä–µ–Ω–¥
        markup = types.InlineKeyboardMarkup()
        
        for rental in active_rentals:
            console = consoles.get(rental['console_id'], {})
            console_name = console.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–Ω—Å–æ–ª—å')
            start_time = datetime.fromisoformat(rental['start_time'])
            duration = datetime.now() - start_time
            hours = int(duration.total_seconds() / 3600)
            minutes = int((duration.total_seconds() % 3600) / 60)
            
            response += f"‚Ä¢ {console_name}\n"
            response += f"  ‚è∞ –í—Ä–µ–º—è: {hours}—á {minutes}–º\n"
            response += f"  üí∞ –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {hours * console.get('rental_price', 0)} –ª–µ–π\n"
            response += f"  üÜî ID: `{rental['id'][:8]}...`\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∞—Ä–µ–Ω–¥—ã
            markup.add(types.InlineKeyboardButton(
                f"üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å {console_name}",
                callback_data=f"end_rental_{rental['id']}"
            ))
        
        bot.reply_to(message, response, parse_mode='Markdown', reply_markup=markup)
    else:
        bot.reply_to(message, response, parse_mode='Markdown', reply_markup=get_keyboard_for_user(user_id))


@bot.message_handler(func=lambda message: message.text == 'üí∞ –ö—É–ø–∏—Ç—å')
def buy_console(message):
    user_id = str(message.from_user.id)
    
    if is_user_banned(user_id):
        bot.reply_to(message, "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        return
    
    if not is_user_registered(user_id):
        bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
        return
    
    consoles = load_json_file(CONSOLES_FILE)
    for_sale = {k: v for k, v in consoles.items() if v.get('sale_price', 0) > 0 and v['status'] == 'available'}
    
    if not for_sale:
        bot.reply_to(message, "üòî –°–µ–π—á–∞—Å –Ω–µ—Ç –∫–æ–Ω—Å–æ–ª–µ–π –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.", reply_markup=get_keyboard_for_user(user_id))
        return
    
    markup = types.InlineKeyboardMarkup()
    for console_id, console in for_sale.items():
        button_text = f"{console['name']} - {console['sale_price']} –ª–µ–π"
        markup.add(types.InlineKeyboardButton(
            button_text, 
            callback_data=f"buy_{console_id}"
        ))
    
    bot.reply_to(message, "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –ø–æ–∫—É–ø–∫–∏:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_rent_'))
def handle_confirm_rent_callback(call):
    user_id = str(call.from_user.id)
    data_parts = call.data.split('_')
    console_id = data_parts[2]
    selected_hours = int(data_parts[3]) if len(data_parts) > 3 else None
    
    if is_user_banned(user_id):
        bot.answer_callback_query(call.id, "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        return
    
    consoles = load_json_file(CONSOLES_FILE)
    users = load_json_file(USERS_FILE)
    
    if console_id not in consoles or consoles[console_id]['status'] != 'available':
        bot.answer_callback_query(call.id, "‚ùå –ö–æ–Ω—Å–æ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    console = consoles[console_id]
    user = users.get(user_id, {})
    
    if is_approval_required():
        # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –∞—Ä–µ–Ω–¥—É
        request_id = str(uuid.uuid4())
        rental_requests = load_json_file(RENTAL_REQUESTS_FILE)
        
        rental_request = {
            'id': request_id,
            'user_id': user_id,
            'console_id': console_id,
            'selected_hours': selected_hours,
            'expected_cost': selected_hours * console['rental_price'] if selected_hours else 0,
            'request_time': datetime.now().isoformat(),
            'status': 'pending'
        }
        
        rental_requests[request_id] = rental_request
        save_json_file(RENTAL_REQUESTS_FILE, rental_requests)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        def escape_markdown_text(text):
            if text is None:
                return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
            special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
            for char in special_chars:
                text = str(text).replace(char, f'\\{char}')
            return text
        
        full_name = escape_markdown_text(user.get('full_name', user.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')))
        phone = escape_markdown_text(user.get('phone_number', '–ù–µ —É–∫–∞–∑–∞–Ω'))
        console_name = escape_markdown_text(console['name'])
        console_model = escape_markdown_text(console['model'])
        
        admin_message = f"üîî **–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∞—Ä–µ–Ω–¥—É**\n\n"
        admin_message += f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:**\n"
        admin_message += f"‚Ä¢ –§–ò–û: {full_name}\n"
        admin_message += f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        admin_message += f"‚Ä¢ ID: {user_id}\n\n"
        admin_message += f"üéÆ **–ö–æ–Ω—Å–æ–ª—å:**\n"
        admin_message += f"‚Ä¢ {console_name} ({console_model})\n"
        admin_message += f"‚Ä¢ –¶–µ–Ω–∞: {console['rental_price']} –ª–µ–π/—á–∞—Å\n"
        if selected_hours:
            selected_days = selected_hours // 24
            if selected_days == 1:
                admin_message += f"‚Ä¢ –í—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã: {selected_days} –¥–µ–Ω—å\n"
            elif selected_days in [2, 3, 4]:
                admin_message += f"‚Ä¢ –í—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã: {selected_days} –¥–Ω—è\n"
            else:
                admin_message += f"‚Ä¢ –í—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã: {selected_days} –¥–Ω–µ–π\n"
            admin_message += f"‚Ä¢ –ö –æ–ø–ª–∞—Ç–µ: {selected_hours * console['rental_price']} –ª–µ–π\n"
        admin_message += f"‚Ä¢ ID: {console_id}\n\n"
        admin_message += f"‚è∞ –í—Ä–µ–º—è –∑–∞—è–≤–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M')}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–∞
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{request_id}"),
            types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{request_id}")
        )
        
        try:
            admin_id = get_admin_chat_id()
            bot.send_message(admin_id, admin_message, parse_mode='Markdown', reply_markup=markup)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
        
        # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        response = f"üìù **–ó–∞—è–≤–∫–∞ –Ω–∞ –∞—Ä–µ–Ω–¥—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!**\n\n"
        response += f"üéÆ –ö–æ–Ω—Å–æ–ª—å: {console['name']}\n"
        response += f"üí∞ –¶–µ–Ω–∞: {console['rental_price']} –ª–µ–π/—á–∞—Å\n"
        if selected_hours:
            selected_days = selected_hours // 24
            if selected_days == 1:
                response += f"‚è∞ –í—Ä–µ–º—è: {selected_days} –¥–µ–Ω—å\n"
            elif selected_days in [2, 3, 4]:
                response += f"‚è∞ –í—Ä–µ–º—è: {selected_days} –¥–Ω—è\n"
            else:
                response += f"‚è∞ –í—Ä–µ–º—è: {selected_days} –¥–Ω–µ–π\n"
            response += f"üíµ –ö –æ–ø–ª–∞—Ç–µ: {selected_hours * console['rental_price']} –ª–µ–π\n"
        response += f"\n‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
        response += f"üÜî ID –∑–∞—è–≤–∫–∏: `{request_id}`"
        
        bot.edit_message_text(response, call.message.chat.id, call.message.message_id, parse_mode='Markdown')
    else:
        # –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∞—Ä–µ–Ω–¥–∞ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        create_rental(user_id, console_id, call, selected_hours=selected_hours)

def create_rental(user_id, console_id, call=None, location=None, selected_hours=None):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã"""
    rentals = load_json_file(RENTALS_FILE)
    consoles = load_json_file(CONSOLES_FILE)
    users = load_json_file(USERS_FILE)
    
    rental_id = str(uuid.uuid4())
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—Ä–µ–Ω–¥—ã –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ –≤—Ä–µ–º—è
    end_time = None
    expected_cost = 0
    if selected_hours:
        end_time = (datetime.now() + timedelta(hours=selected_hours)).isoformat()
        expected_cost = selected_hours * consoles[console_id]['rental_price']
    
    rental = {
        'id': rental_id,
        'user_id': user_id,
        'console_id': console_id,
        'start_time': datetime.now().isoformat(),
        'expected_end_time': end_time,
        'selected_hours': selected_hours,
        'expected_cost': expected_cost,
        'end_time': None,
        'status': 'active',
        'total_cost': 0
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞
    if location:
        rental['location'] = location
    
    rentals[rental_id] = rental
    consoles[console_id]['status'] = 'rented'
    
    save_json_file(RENTALS_FILE, rentals)
    save_json_file(CONSOLES_FILE, consoles)
    
    console_name = consoles[console_id]['name']
    price_per_hour = consoles[console_id]['rental_price']
    user = users.get(user_id, {})
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–∞—á–∞–ª–µ –∞—Ä–µ–Ω–¥—ã
    admin_message = f"‚úÖ **–ê—Ä–µ–Ω–¥–∞ –Ω–∞—á–∞–ª–∞—Å—å**\n\n"
    admin_message += f"üë§ {user.get('full_name', user.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'))}\n"
    admin_message += f"üì± {user.get('phone_number', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    admin_message += f"üéÆ {console_name}\n"
    admin_message += f"üí∞ {price_per_hour} –ª–µ–π/—á–∞—Å\n"
    if selected_hours:
        selected_days = selected_hours // 24
        if selected_days == 1:
            admin_message += f"‚è∞ –í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {selected_days} –¥–µ–Ω—å\n"
        elif selected_days in [2, 3, 4]:
            admin_message += f"‚è∞ –í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {selected_days} –¥–Ω—è\n"
        else:
            admin_message += f"‚è∞ –í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {selected_days} –¥–Ω–µ–π\n"
        admin_message += f"üíµ –û–∂–∏–¥–∞–µ–º–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {expected_cost} –ª–µ–π\n"
    admin_message += f"üïê –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M')}\n"
    admin_message += f"üÜî ID –∞—Ä–µ–Ω–¥—ã: `{rental_id}`"
    
    notify_admin(admin_message)
    
    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    response = f"‚úÖ –ö–æ–Ω—Å–æ–ª—å **{console_name}** –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–∞!\n\n"
    response += f"üÜî ID –∞—Ä–µ–Ω–¥—ã: `{rental_id}`\n"
    response += f"üí∞ –¶–µ–Ω–∞: {price_per_hour} –ª–µ–π/—á–∞—Å\n"
    if selected_hours:
        selected_days = selected_hours // 24
        if selected_days == 1:
            response += f"‚è∞ –í—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã: {selected_days} –¥–µ–Ω—å\n"
        elif selected_days in [2, 3, 4]:
            response += f"‚è∞ –í—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã: {selected_days} –¥–Ω—è\n"
        else:
            response += f"‚è∞ –í—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã: {selected_days} –¥–Ω–µ–π\n"
        response += f"üíµ –ö –æ–ø–ª–∞—Ç–µ: {expected_cost} –ª–µ–π\n"
        response += f"üïê –û–∫–æ–Ω—á–∞–Ω–∏–µ: {datetime.fromisoformat(end_time).strftime('%Y-%m-%d %H:%M')}\n"
    response += f"üïê –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M')}\n\n"
    response += "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—Ä–µ–Ω–¥—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /end —Å ID –∞—Ä–µ–Ω–¥—ã"
    
    if call:
        bot.edit_message_text(response, call.message.chat.id, call.message.message_id, parse_mode='Markdown')
    
    return rental_id

@bot.callback_query_handler(func=lambda call: call.data.startswith('buy_'))
def handle_buy_callback(call):
    user_id = str(call.from_user.id)
    console_id = call.data.split('_')[1]
    
    if is_user_banned(user_id):
        bot.answer_callback_query(call.id, "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        return
    
    consoles = load_json_file(CONSOLES_FILE)
    
    if console_id not in consoles or consoles[console_id]['status'] != 'available':
        bot.answer_callback_query(call.id, "‚ùå –ö–æ–Ω—Å–æ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    console = consoles[console_id]
    
    response = f"üí∞ **–ü–æ–∫—É–ø–∫–∞ –∫–æ–Ω—Å–æ–ª–∏**\n\n"
    response += f"üéÆ –ö–æ–Ω—Å–æ–ª—å: {console['name']} ({console['model']})\n"
    response += f"üíµ –¶–µ–Ω–∞: {console['sale_price']} –ª–µ–π\n\n"
    response += f"–î–ª—è –ø–æ–∫—É–ø–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:\n"
    response += f"Telegram: @{ADMIN_TELEGRAM_ID}\n"
    response += f"ID –∫–æ–Ω—Å–æ–ª–∏: `{console_id}`"
    
    bot.edit_message_text(response, call.message.chat.id, call.message.message_id, parse_mode='Markdown')

@bot.message_handler(commands=['end'])
def end_rental(message):
    user_id = str(message.from_user.id)
    
    if is_user_banned(user_id):
        bot.reply_to(message, "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        return
    
    args = message.text.split()
    if len(args) < 2:
        bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∞—Ä–µ–Ω–¥—ã: /end <ID –∞—Ä–µ–Ω–¥—ã>")
        return
    
    rental_id = args[1]
    rentals = load_json_file(RENTALS_FILE)
    consoles = load_json_file(CONSOLES_FILE)
    users = load_json_file(USERS_FILE)
    
    if rental_id not in rentals:
        bot.reply_to(message, "‚ùå –ê—Ä–µ–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    rental = rentals[rental_id]
    
    if rental['user_id'] != user_id:
        bot.reply_to(message, "‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∞—Ä–µ–Ω–¥–∞")
        return
    
    if rental['status'] != 'active':
        bot.reply_to(message, "‚ùå –ê—Ä–µ–Ω–¥–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return
    
    start_time = datetime.fromisoformat(rental['start_time'])
    end_time = datetime.now()
    duration = end_time - start_time
    hours = max(1, int(duration.total_seconds() / 3600))
    
    console = consoles[rental['console_id']]
    total_cost = hours * console['rental_price']
    
    rental['end_time'] = end_time.isoformat()
    rental['status'] = 'completed'
    rental['total_cost'] = total_cost
    
    console['status'] = 'available'
    
    if user_id in users:
        users[user_id]['total_spent'] = users[user_id].get('total_spent', 0) + total_cost
    
    save_json_file(RENTALS_FILE, rentals)
    save_json_file(CONSOLES_FILE, consoles)
    save_json_file(USERS_FILE, users)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    update_rating_on_rental_completion(user_id, rental)
    
    response = f"‚úÖ **–ê—Ä–µ–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
    response += f"üéÆ –ö–æ–Ω—Å–æ–ª—å: {console['name']}\n"
    response += f"‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {hours} —á–∞—Å–æ–≤\n"
    response += f"üí∞ –ö –æ–ø–ª–∞—Ç–µ: {total_cost} –ª–µ–π\n\n"
    response += f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!"
    
    bot.reply_to(message, response, parse_mode='Markdown', reply_markup=get_keyboard_for_user(user_id))

@bot.message_handler(func=lambda message: message.text == 'üìù –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å')
def rental_menu(message):
    user_id = str(message.from_user.id)
    
    if is_user_banned(user_id):
        bot.reply_to(message, "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        return
    
    if not is_user_registered(user_id):
        bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
        return
    
    consoles = load_json_file(CONSOLES_FILE)
    
    if not consoles:
        bot.reply_to(message, "üì≠ –ö–æ–Ω—Å–æ–ª–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã", reply_markup=get_keyboard_for_user(user_id))
        return
    
    response = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –∞—Ä–µ–Ω–¥—ã:\n\n"
    markup = types.InlineKeyboardMarkup()
    
    for console_id, console in consoles.items():
        if console['status'] == 'available':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—é
            is_reserved, reserved_by = is_console_temp_reserved(console_id, exclude_user_id=user_id)
            
            if is_reserved:
                status_emoji = "‚è≥"  # –í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
                button_text = f"{status_emoji} {console['name']} - –í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
                callback_data = f"reserved_{console_id}"
            else:
                status_emoji = "üü¢"  # –ó–µ–ª–µ–Ω—ã–π –∫—Ä—É–∂–æ–∫ –¥–ª—è —Å–≤–æ–±–æ–¥–Ω—ã—Ö
                button_text = f"{status_emoji} {console['name']} - {console['rental_price']} –ª–µ–π/—á–∞—Å"
                callback_data = f"console_{console_id}"
                print(f"DEBUG: Creating button with callback_data: {callback_data}")
            
            markup.add(types.InlineKeyboardButton(button_text, callback_data=callback_data))
        else:
            status_emoji = "üî¥"  # –ö—Ä–∞—Å–Ω—ã–π –∫—Ä—É–∂–æ–∫ –¥–ª—è –∑–∞–Ω—è—Ç—ã—Ö
            rental_info = get_console_rental_info(console_id)
            if rental_info:
                start_date = rental_info['start_time'].strftime('%d.%m')
                end_date = rental_info['estimated_end_time'].strftime('%d.%m')
                button_text = f"{status_emoji} {console['name']} - –ó–∞–Ω—è—Ç–∞ —Å {start_date} –¥–æ {end_date}"
            else:
                button_text = f"{status_emoji} {console['name']} - –ó–∞–Ω—è—Ç–∞"
            callback_data = f"console_unavailable_{console_id}"
            print(f"DEBUG: Creating unavailable button with callback_data: {callback_data}")
            markup.add(types.InlineKeyboardButton(button_text, callback_data=callback_data))
    
    bot.reply_to(message, response, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('reserved_'))
def handle_reserved_console(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Å–æ–ª–µ–π"""
    bot.answer_callback_query(call.id, "‚è≥ –≠—Ç–∞ –∫–æ–Ω—Å–æ–ª—å –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–Ω—è—Ç–∞ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

@bot.callback_query_handler(func=lambda call: call.data.startswith('console_'))
def handle_console_selection(call):
    try:
        user_id = str(call.from_user.id)
        print(f"DEBUG: Console callback received: {call.data}")
        
        if is_user_banned(user_id):
            bot.answer_callback_query(call.id, "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            return
        
        callback_parts = call.data.split('_')
        print(f"DEBUG: Callback parts: {callback_parts}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –∫–æ–Ω—Å–æ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        if len(callback_parts) > 2 and callback_parts[1] == 'unavailable':
            console_id = callback_parts[2]
            consoles = load_json_file(CONSOLES_FILE)
            
            if console_id in consoles:
                console = consoles[console_id]
                rental_info = get_console_rental_info(console_id)
                
                if rental_info:
                    start_date = rental_info['start_time'].strftime('%d.%m.%Y')
                    end_date = rental_info['estimated_end_time'].strftime('%d.%m.%Y')
                    response = f"**{console['name']}** ({console['model']})\n\n"
                    response += f"üî¥ **–°—Ç–∞—Ç—É—Å:** –ó–∞–Ω—è—Ç–∞\n"
                    response += f"üìÖ **–ü–µ—Ä–∏–æ–¥ –∞—Ä–µ–Ω–¥—ã:** —Å {start_date} –¥–æ {end_date}\n"
                    response += f"üë§ **–ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä:** {rental_info['user_name']}\n\n"
                    response += f"üí∞ –¶–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã: {console['rental_price']} –ª–µ–π/—á–∞—Å\n"
                    
                    if console.get('games'):
                        response += f"\n**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã:**\n"
                        for game in console['games']:
                            response += f"‚Ä¢ {game}\n"
                    
                    markup = types.InlineKeyboardMarkup()
                    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É", callback_data="back_to_selection"))
                    
                    bot.edit_message_text(response, call.message.chat.id, call.message.message_id, 
                                         parse_mode='Markdown', reply_markup=markup)
                else:
                    bot.answer_callback_query(call.id, "‚ùå –≠—Ç–∞ –∫–æ–Ω—Å–æ–ª—å —Å–µ–π—á–∞—Å –∑–∞–Ω—è—Ç–∞")
            else:
                bot.answer_callback_query(call.id, "‚ùå –ö–æ–Ω—Å–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        console_id = callback_parts[1]
        consoles = load_json_file(CONSOLES_FILE)
        print(f"DEBUG: Looking for console_id: {console_id}")
        print(f"DEBUG: Available consoles: {list(consoles.keys())}")
        
        if console_id not in consoles:
            bot.answer_callback_query(call.id, "‚ùå –ö–æ–Ω—Å–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        console = consoles[console_id]
        print(f"DEBUG: Found console: {console['name']}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Å–æ–ª–∏
        caption = f"**{console['name']}** ({console['model']})\n\n"
        caption += f"üí∞ –¶–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã: {console['rental_price']} –ª–µ–π/—á–∞—Å\n"
        
        if console.get('sale_price', 0) > 0:
            caption += f"üè∑Ô∏è –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: {console['sale_price']} –ª–µ–π\n"
        
        caption += f"üìä –°—Ç–∞—Ç—É—Å: {'‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞' if console['status'] == 'available' else 'üî¥ –ó–∞–Ω—è—Ç–∞'}\n\n"
        
        if console.get('games'):
            caption += f"**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã:**\n"
            for game in console['games']:
                caption += f"‚Ä¢ {game}\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        markup = types.InlineKeyboardMarkup()
        
        if console['status'] == 'available':
            current_date = datetime.now()
            short_console_id = console_id[:8]
            calendar_callback = f"cal_{short_console_id}_{current_date.strftime('%Y-%m')}"
            markup.add(types.InlineKeyboardButton("üìÖ –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∞—Ä–µ–Ω–¥—ã", callback_data=calendar_callback))
        
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É", callback_data="back_to_selection"))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–æ—Ç–æ
        settings = load_json_file(ADMIN_SETTINGS_FILE)
        show_photos = settings.get('show_console_photos', True)
        console_photo_enabled = console.get('show_photo_in_bot', True)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–æ—Ç–æ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç
        if show_photos and console_photo_enabled:
            try:
                photo_path = get_console_photo_path_bot(console_id, console)
                
                if photo_path:
                    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    try:
                        bot.delete_message(call.message.chat.id, call.message.message_id)
                    except:
                        pass
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
                    with open(photo_path, 'rb') as photo_file:
                        bot.send_photo(
                            call.message.chat.id, 
                            photo_file, 
                            caption=caption, 
                            parse_mode='Markdown',
                            reply_markup=markup
                        )
                elif console.get('photo_id'):
                    # –°—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞ - Telegram file_id
                    try:
                        bot.delete_message(call.message.chat.id, call.message.message_id)
                    except:
                        pass
                    
                    bot.send_photo(
                        call.message.chat.id, 
                        console['photo_id'], 
                        caption=caption, 
                        parse_mode='Markdown',
                        reply_markup=markup
                    )
                else:
                    # –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    bot.edit_message_text(caption, call.message.chat.id, call.message.message_id, 
                                         parse_mode='Markdown', reply_markup=markup)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –≤ handle_console_selection: {e}")
                # Fallback –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                bot.edit_message_text(caption, call.message.chat.id, call.message.message_id, 
                                     parse_mode='Markdown', reply_markup=markup)
        else:
            # –ë–µ–∑ —Ñ–æ—Ç–æ
            bot.edit_message_text(caption, call.message.chat.id, call.message.message_id, 
                                 parse_mode='Markdown', reply_markup=markup)
        print(f"DEBUG: Successfully updated message")
        
    except Exception as e:
        print(f"ERROR in handle_console_selection: {e}")
        bot.answer_callback_query(call.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

def get_occupied_dates(console_id):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç—ã—Ö –¥–∞—Ç –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏"""
    rentals = load_json_file(RENTALS_FILE)
    occupied_dates = set()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—ã –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥
    for rental in rentals.values():
        if rental['console_id'] == console_id and rental['status'] == 'active':
            start_date = datetime.fromisoformat(rental['start_time'])
            end_date = datetime.fromisoformat(rental['estimated_end_time'])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –¥–∞—Ç—ã –º–µ–∂–¥—É –Ω–∞—á–∞–ª–æ–º –∏ –∫–æ–Ω—Ü–æ–º –∞—Ä–µ–Ω–¥—ã
            current_date = start_date.date()
            end_date = end_date.date()
            
            while current_date <= end_date:
                occupied_dates.add(current_date)
                current_date += timedelta(days=1)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    try:
        calendar_file = os.path.join('data', 'calendar.json')
        calendar_data = load_json_file(calendar_file)
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã (–¥–ª—è –≤—Å–µ—Ö –∫–æ–Ω—Å–æ–ª–µ–π)
        system_blocked = calendar_data.get('system_blocked_dates', [])
        for date_str in system_blocked:
            date_obj = datetime.strptime(date_str, '%Y-%m-%d').date()
            occupied_dates.add(date_obj)
        
        # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–Ω—Å–æ–ª–∏
        console_blocked = calendar_data.get('console_blocked_dates', {}).get(console_id, [])
        for date_str in console_blocked:
            date_obj = datetime.strptime(date_str, '%Y-%m-%d').date()
            occupied_dates.add(date_obj)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –¥–Ω–∏ (–Ω–µ—Ä–∞–±–æ—á–∏–µ)
        holidays = calendar_data.get('holidays', [])
        for holiday in holidays:
            if not holiday.get('working', False):  # –ï—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—á–∏–π –ø—Ä–∞–∑–¥–Ω–∏–∫
                date_obj = datetime.strptime(holiday['date'], '%Y-%m-%d').date()
                occupied_dates.add(date_obj)
        
        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –≤ create_calendar() –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞
        # –ó–¥–µ—Å—å –º—ã –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Ä–∞–±–æ—á–∏–µ –¥–Ω–∏, —Ç–∞–∫ –∫–∞–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ –¥–ª—è –∫–∞–∫–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        # Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É
        try:
            blocked_dates_file = os.path.join('data', 'blocked_dates.json')
            blocked_data = load_json_file(blocked_dates_file)
            
            system_blocked = blocked_data.get('system_blocked_dates', [])
            for date_str in system_blocked:
                date_obj = datetime.strptime(date_str, '%Y-%m-%d').date()
                occupied_dates.add(date_obj)
            
            console_blocked = blocked_data.get('console_blocked_dates', {}).get(console_id, [])
            for date_str in console_blocked:
                date_obj = datetime.strptime(date_str, '%Y-%m-%d').date()
                occupied_dates.add(date_obj)
        except Exception as fallback_error:
            print(f"–û—à–∏–±–∫–∞ fallback –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—Ç: {fallback_error}")
    
    return occupied_dates

def get_available_time_slots(console_id, date_str):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –¥–∞—Ç—ã"""
    try:
        calendar_file = os.path.join('data', 'calendar.json')
        calendar_data = load_json_file(calendar_file)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
        all_slots = calendar_data.get('settings', {}).get('time_slots', [
            "09:00", "10:00", "11:00", "12:00", "13:00", "14:00", 
            "15:00", "16:00", "17:00", "18:00", "19:00", "20:00", "21:00"
        ])
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–π
        date_key = f"{date_str}_{console_id}"
        reservations = calendar_data.get('reservations', {}).get(date_key, [])
        occupied_slots = [r['time_slot'] for r in reservations if r['status'] == 'reserved']
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
        available_slots = [slot for slot in all_slots if slot not in occupied_slots]
        
        return available_slots, occupied_slots
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Å–ª–æ—Ç—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
        default_slots = ["09:00", "12:00", "15:00", "18:00", "21:00"]
        return default_slots, []

def get_calendar_settings():
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    try:
        calendar_file = os.path.join('data', 'calendar.json')
        calendar_data = load_json_file(calendar_file)
        return calendar_data.get('settings', {}), calendar_data.get('booking_rules', {})
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
        return {}, {}

def create_calendar(console_id, year, month):
    """–°–æ–∑–¥–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    occupied_dates = get_occupied_dates(console_id)
    today = datetime.now().date()
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π
    try:
        calendar_file = os.path.join('data', 'calendar.json')
        calendar_data = load_json_file(calendar_file)
        working_days = calendar_data.get('working_days', [1, 2, 3, 4, 5, 6, 7])
    except:
        working_days = [1, 2, 3, 4, 5, 6, 7]  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ –¥–Ω–∏ —Ä–∞–±–æ—á–∏–µ
    
    # –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    cal = calendar.monthcalendar(year, month)
    month_name = calendar.month_name[month]
    
    keyboard = types.InlineKeyboardMarkup(row_width=7)
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥–∞
    keyboard.add(types.InlineKeyboardButton(
        f"üìÖ {month_name} {year}", 
        callback_data="ignore"
    ))
    
    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    days_of_week = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
    keyboard.add(*[types.InlineKeyboardButton(day, callback_data="ignore") for day in days_of_week])
    
    # –î–Ω–∏ –º–µ—Å—è—Ü–∞
    for week in cal:
        week_buttons = []
        for day in week:
            if day == 0:
                week_buttons.append(types.InlineKeyboardButton(" ", callback_data="ignore"))
            else:
                current_date = datetime(year, month, day).date()
                weekday = current_date.weekday() + 1  # 1 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 7 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
                
                if current_date in occupied_dates or weekday not in working_days:
                    # –ó–∞–Ω—è—Ç—ã–µ –¥–Ω–∏ - –∫—Ä–∞—Å–Ω—ã–µ, –ø–µ—Ä–µ–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞—Ç–µ
                    short_console_id = console_id[:8]
                    callback_data = f"busy_{short_console_id}_{year}-{month:02d}-{day:02d}"
                    week_buttons.append(types.InlineKeyboardButton(f"üî¥{day}", callback_data=callback_data))
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–∫–∏–¥–∫–∞ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å
                    has_discount = check_date_has_discount(console_id, current_date)
                    short_console_id = console_id[:8]
                    callback_data = f"dt_{short_console_id}_{year}-{month:02d}-{day:02d}"
                    
                    if has_discount:
                        # –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–Ω–∏ —Å–æ —Å–∫–∏–¥–∫–æ–π - –¥–æ–±–∞–≤–ª—è–µ–º –æ–≥–æ–Ω—å
                        week_buttons.append(types.InlineKeyboardButton(f"üî•{day}", callback_data=callback_data))
                    else:
                        # –û–±—ã—á–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–Ω–∏
                        week_buttons.append(types.InlineKeyboardButton(str(day), callback_data=callback_data))
        
        keyboard.add(*week_buttons)
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
    prev_month = month - 1 if month > 1 else 12
    prev_year = year if month > 1 else year - 1
    next_month = month + 1 if month < 12 else 1
    next_year = year if month < 12 else year + 1
    
    short_console_id = console_id[:8]
    keyboard.add(
        types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"cal_{short_console_id}_{prev_year}-{prev_month:02d}"),
        types.InlineKeyboardButton("‚û°Ô∏è", callback_data=f"cal_{short_console_id}_{next_year}-{next_month:02d}")
    )
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∫ –∫–æ–Ω—Å–æ–ª–∏
    keyboard.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–æ–Ω—Å–æ–ª–∏", callback_data=f"console_{console_id}"))
    
    return keyboard

@bot.callback_query_handler(func=lambda call: call.data.startswith('cal_'))
def handle_calendar_navigation(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é"""
    try:
        parts = call.data.split('_')
        short_console_id = parts[1]
        date_str = parts[2]
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–Ω—ã–π console_id –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–º—É ID
        consoles = load_json_file(CONSOLES_FILE)
        console_id = None
        for cid in consoles.keys():
            if cid.startswith(short_console_id):
                console_id = cid
                break
        
        if not console_id:
            bot.answer_callback_query(call.id, "‚ùå –ö–æ–Ω—Å–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        year, month = map(int, date_str.split('-'))
        
        response = "üìÖ **–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∞—Ä–µ–Ω–¥—ã**\n\n"
        response += "üî¥ - –ó–∞–Ω—è—Ç–æ\n"
        response += "‚ùå - –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n\n"
        response += "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–±–æ–¥–Ω—É—é –¥–∞—Ç—É:"
        
        markup = create_calendar(console_id, year, month)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        try:
            if call.message.photo:
                bot.delete_message(call.message.chat.id, call.message.message_id)
                bot.send_message(call.message.chat.id, response, parse_mode='Markdown', reply_markup=markup)
            else:
                bot.edit_message_text(response, call.message.chat.id, call.message.message_id,
                                    parse_mode='Markdown', reply_markup=markup)
        except Exception as e:
            print(f"Error in calendar navigation: {e}")
            try:
                bot.delete_message(call.message.chat.id, call.message.message_id)
            except:
                pass
            bot.send_message(call.message.chat.id, response, parse_mode='Markdown', reply_markup=markup)
            
    except Exception as e:
        print(f"Error in handle_calendar_navigation: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é")

@bot.callback_query_handler(func=lambda call: call.data == 'ignore')
def handle_ignore_callback(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã"""
    # –ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –ø—É—Å—Ç—ã–º callback —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('busy_'))
def handle_busy_date_selection(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∑–∞–Ω—è—Ç–æ–π –¥–∞—Ç–µ"""
    try:
        parts = call.data.split('_')
        short_console_id = parts[1]
        selected_date = parts[2]  # YYYY-MM-DD
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–Ω—ã–π console_id –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–º—É ID
        consoles = load_json_file(CONSOLES_FILE)
        console_id = None
        for cid in consoles.keys():
            if cid.startswith(short_console_id):
                console_id = cid
                break
        
        if not console_id:
            bot.answer_callback_query(call.id, "‚ùå –ö–æ–Ω—Å–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Ä–µ–Ω–¥–µ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
        rentals = load_json_file(RENTALS_FILE)
        users = load_json_file(USERS_FILE)
        
        selected_date_obj = datetime.strptime(selected_date, '%Y-%m-%d').date()
        rental_info = None
        
        for rental in rentals.values():
            if rental['console_id'] == console_id and rental['status'] == 'active':
                start_date = datetime.fromisoformat(rental['start_time']).date()
                end_date = datetime.fromisoformat(rental['estimated_end_time']).date()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –≤ –ø–µ—Ä–∏–æ–¥ –∞—Ä–µ–Ω–¥—ã
                if start_date <= selected_date_obj <= end_date:
                    rental_info = rental
                    break
        
        if rental_info:
            user = users.get(rental_info['user_id'], {})
            user_name = user.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
            
            start_date_formatted = datetime.fromisoformat(rental_info['start_time']).strftime('%d.%m.%Y')
            end_date_formatted = datetime.fromisoformat(rental_info['estimated_end_time']).strftime('%d.%m.%Y')
            
            message = f"üî¥ **–î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∞**\n\n"
            message += f"üìÖ **–í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞:** {selected_date_obj.strftime('%d.%m.%Y')}\n\n"
            message += f"**–ü–µ—Ä–∏–æ–¥ –∞—Ä–µ–Ω–¥—ã:** {start_date_formatted} - {end_date_formatted}\n"
            message += f"**–ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä:** {user_name}\n"
            message += f"**ID –∞—Ä–µ–Ω–¥—ã:** `{rental_info['id'][:8]}...`\n\n"
            message += "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Å–≤–æ–±–æ–¥–Ω—É—é –¥–∞—Ç—É –¥–ª—è –∞—Ä–µ–Ω–¥—ã."
        else:
            message = f"üî¥ **–î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∞**\n\n"
            message += f"üìÖ **–í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞:** {selected_date_obj.strftime('%d.%m.%Y')}\n\n"
            message += "–≠—Ç–∞ –¥–∞—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∞—Ä–µ–Ω–¥—ã.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Å–≤–æ–±–æ–¥–Ω—É—é –¥–∞—Ç—É."
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ)
        bot.answer_callback_query(call.id, "üî¥ –≠—Ç–∞ –¥–∞—Ç–∞ –∑–∞–Ω—è—Ç–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.", show_alert=True)
        
    except Exception as e:
        print(f"Error in handle_busy_date_selection: {e}")
        bot.answer_callback_query(call.id, "üî¥ –≠—Ç–∞ –¥–∞—Ç–∞ –∑–∞–Ω—è—Ç–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.", show_alert=True)

@bot.callback_query_handler(func=lambda call: call.data.startswith('dt_'))
def handle_date_selection(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    try:
        parts = call.data.split('_')
        short_console_id = parts[1]
        selected_date = parts[2]
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–Ω—ã–π console_id –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–º—É ID
        consoles = load_json_file(CONSOLES_FILE)
        console_id = None
        for cid in consoles.keys():
            if cid.startswith(short_console_id):
                console_id = cid
                break
        
        if not console_id:
            bot.answer_callback_query(call.id, "‚ùå –ö–æ–Ω—Å–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –≤ user state (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å)
        if not hasattr(handle_date_selection, 'user_states'):
            handle_date_selection.user_states = {}
        
        user_id = str(call.from_user.id)
        handle_date_selection.user_states[user_id] = {
            'console_id': console_id,
            'selected_date': selected_date
        }
        
        # –¢–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        consoles = load_json_file(CONSOLES_FILE)
        console = consoles[console_id]
        price_per_hour = console['rental_price']
        
        selected_date_obj = datetime.strptime(selected_date, '%Y-%m-%d').date()
        formatted_date = selected_date_obj.strftime('%d.%m.%Y')
        
        response = f"‚è∞ **–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã**\n\n"
        response += f"üéÆ –ö–æ–Ω—Å–æ–ª—å: {console['name']}\n"
        response += f"üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {formatted_date}\n"
        response += f"üí∞ –¶–µ–Ω–∞: {price_per_hour} –ª–µ–π/—á–∞—Å\n\n"
        response += f"üìä **–í–∞—Ä–∏–∞–Ω—Ç—ã –∞—Ä–µ–Ω–¥—ã:**\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å—é
        markup = types.InlineKeyboardMarkup()
        time_options = [24, 48, 72, 168, 336]  # 1, 2, 3, 7, 14 –¥–Ω–µ–π –≤ —á–∞—Å–∞—Ö
        day_labels = [1, 2, 3, 7, 14]  # —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–Ω–∏
        
        for i, hours in enumerate(time_options):
            days = day_labels[i]
            original_cost = hours * price_per_hour
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
            discounted_cost, discount_amount, discount_info = calculate_discounted_price(console_id, original_cost, hours)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è –ª–∏ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ —Å –∑–∞–Ω—è—Ç—ã–º–∏ –¥–∞—Ç–∞–º–∏
            end_date = selected_date_obj + timedelta(days=days)
            occupied_dates = get_occupied_dates(console_id)
            
            is_available = True
            check_date = selected_date_obj
            while check_date < end_date:
                if check_date in occupied_dates:
                    is_available = False
                    break
                check_date += timedelta(days=1)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏
            if discount_amount > 0:
                if days == 1:
                    button_text = f"{days} –¥–µ–Ω—å - {discounted_cost} –ª–µ–π üî•"
                    response += f"‚Ä¢ {days} –¥–µ–Ω—å = ~~{original_cost}~~ **{discounted_cost} –ª–µ–π** üî• (-{discount_amount} –ª–µ–π)"
                elif days in [2, 3, 4]:
                    button_text = f"{days} –¥–Ω—è - {discounted_cost} –ª–µ–π üî•"
                    response += f"‚Ä¢ {days} –¥–Ω—è = ~~{original_cost}~~ **{discounted_cost} –ª–µ–π** üî• (-{discount_amount} –ª–µ–π)"
                else:
                    button_text = f"{days} –¥–Ω–µ–π - {discounted_cost} –ª–µ–π üî•"
                    response += f"‚Ä¢ {days} –¥–Ω–µ–π = ~~{original_cost}~~ **{discounted_cost} –ª–µ–π** üî• (-{discount_amount} –ª–µ–π)"
            else:
                if days == 1:
                    button_text = f"{days} –¥–µ–Ω—å - {original_cost} –ª–µ–π"
                    response += f"‚Ä¢ {days} –¥–µ–Ω—å = {original_cost} –ª–µ–π"
                elif days in [2, 3, 4]:
                    button_text = f"{days} –¥–Ω—è - {original_cost} –ª–µ–π"
                    response += f"‚Ä¢ {days} –¥–Ω—è = {original_cost} –ª–µ–π"
                else:
                    button_text = f"{days} –¥–Ω–µ–π - {original_cost} –ª–µ–π"
                    response += f"‚Ä¢ {days} –¥–Ω–µ–π = {original_cost} –ª–µ–π"
            
            if not is_available:
                button_text += " ‚ùå"
                response += " ‚ùå (–ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å –∑–∞–Ω—è—Ç—ã–º–∏ –¥–∞—Ç–∞–º–∏)"
                callback_data = "ignore"
            else:
                # –°–æ–∫—Ä–∞—â–∞–µ–º –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ callback_data
                short_console_id = console_id[:8]
                callback_data = f"rd_{short_console_id}_{selected_date}_{hours}"
            
            response += "\n"
            markup.add(types.InlineKeyboardButton(button_text, callback_data=callback_data))
        
        short_console_id = console_id[:8]
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É", 
                                            callback_data=f"cal_{short_console_id}_{selected_date_obj.strftime('%Y-%m')}"))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        try:
            if call.message.photo:
                bot.delete_message(call.message.chat.id, call.message.message_id)
                bot.send_message(call.message.chat.id, response, parse_mode='Markdown', reply_markup=markup)
            else:
                bot.edit_message_text(response, call.message.chat.id, call.message.message_id,
                                    parse_mode='Markdown', reply_markup=markup)
        except Exception as e:
            print(f"Error in date selection: {e}")
            try:
                bot.delete_message(call.message.chat.id, call.message.message_id)
            except:
                pass
            bot.send_message(call.message.chat.id, response, parse_mode='Markdown', reply_markup=markup)
            
    except Exception as e:
        print(f"Error in handle_date_selection: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã")

@bot.callback_query_handler(func=lambda call: call.data.startswith('select_time_'))
def handle_time_selection(call):
    user_id = str(call.from_user.id)
    console_id = call.data.split('_')[2]
    
    if is_user_banned(user_id):
        bot.answer_callback_query(call.id, "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        return
    
    consoles = load_json_file(CONSOLES_FILE)
    
    if console_id not in consoles or consoles[console_id]['status'] != 'available':
        bot.answer_callback_query(call.id, "‚ùå –ö–æ–Ω—Å–æ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    console = consoles[console_id]
    price_per_hour = console['rental_price']
    
    response = f"‚è∞ **–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã**\n\n"
    response += f"üéÆ –ö–æ–Ω—Å–æ–ª—å: {console['name']}\n"
    response += f"üí∞ –¶–µ–Ω–∞: {price_per_hour} –ª–µ–π/—á–∞—Å\n\n"
    response += f"üìä **–í–∞—Ä–∏–∞–Ω—Ç—ã –∞—Ä–µ–Ω–¥—ã:**\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å—é
    markup = types.InlineKeyboardMarkup()
    time_options = [24, 48, 72, 168, 336]  # 1, 2, 3, 7, 14 –¥–Ω–µ–π –≤ —á–∞—Å–∞—Ö
    day_labels = [1, 2, 3, 7, 14]  # —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–Ω–∏
    
    for i, hours in enumerate(time_options):
        days = day_labels[i]
        original_cost = hours * price_per_hour
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
        discounted_cost, discount_amount, discount_info = calculate_discounted_price(console_id, original_cost, hours)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏
        if discount_amount > 0:
            if days == 1:
                button_text = f"{days} –¥–µ–Ω—å - {discounted_cost} –ª–µ–π üî•"
                response += f"‚Ä¢ {days} –¥–µ–Ω—å = ~~{original_cost}~~ **{discounted_cost} –ª–µ–π** üî• (-{discount_amount} –ª–µ–π)\n"
            elif days in [2, 3, 4]:
                button_text = f"{days} –¥–Ω—è - {discounted_cost} –ª–µ–π üî•"
                response += f"‚Ä¢ {days} –¥–Ω—è = ~~{original_cost}~~ **{discounted_cost} –ª–µ–π** üî• (-{discount_amount} –ª–µ–π)\n"
            else:
                button_text = f"{days} –¥–Ω–µ–π - {discounted_cost} –ª–µ–π üî•"
                response += f"‚Ä¢ {days} –¥–Ω–µ–π = ~~{original_cost}~~ **{discounted_cost} –ª–µ–π** üî• (-{discount_amount} –ª–µ–π)\n"
        else:
            if days == 1:
                button_text = f"{days} –¥–µ–Ω—å - {original_cost} –ª–µ–π"
                response += f"‚Ä¢ {days} –¥–µ–Ω—å = {original_cost} –ª–µ–π\n"
            elif days in [2, 3, 4]:
                button_text = f"{days} –¥–Ω—è - {original_cost} –ª–µ–π"
                response += f"‚Ä¢ {days} –¥–Ω—è = {original_cost} –ª–µ–π\n"
            else:
                button_text = f"{days} –¥–Ω–µ–π - {original_cost} –ª–µ–π"
                response += f"‚Ä¢ {days} –¥–Ω–µ–π = {original_cost} –ª–µ–π\n"
        
        markup.add(types.InlineKeyboardButton(button_text, callback_data=f"rent_{console_id}_{hours}"))
    
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–æ–Ω—Å–æ–ª–∏", callback_data=f"console_{console_id}"))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    try:
        if call.message.photo:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
            bot.delete_message(call.message.chat.id, call.message.message_id)
            bot.send_message(call.message.chat.id, response, parse_mode='Markdown', reply_markup=markup)
        else:
            # –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø—Ä–æ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
            bot.edit_message_text(response, call.message.chat.id, call.message.message_id, 
                                parse_mode='Markdown', reply_markup=markup)
    except Exception as e:
        # Fallback - —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        print(f"Error in handle_time_selection: {e}")
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except:
            pass
        bot.send_message(call.message.chat.id, response, parse_mode='Markdown', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('rd_'))
def handle_confirm_rent_with_date(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞—Ä–µ–Ω–¥—ã —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç–æ–π"""
    user_id = str(call.from_user.id)
    data_parts = call.data.split('_')
    short_console_id = data_parts[1]  # –ü–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤
    selected_date = data_parts[2]  # YYYY-MM-DD
    selected_hours = int(data_parts[3])
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–Ω—ã–π console_id –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–º—É ID
    consoles = load_json_file(CONSOLES_FILE)
    console_id = None
    for cid in consoles.keys():
        if cid.startswith(short_console_id):
            console_id = cid
            break
    
    if not console_id:
        bot.answer_callback_query(call.id, "‚ùå –ö–æ–Ω—Å–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    if is_user_banned(user_id):
        bot.answer_callback_query(call.id, "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–Ω—Å–æ–ª–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã
    selected_date_obj = datetime.strptime(selected_date, '%Y-%m-%d').date()
    end_date_obj = selected_date_obj + timedelta(days=selected_hours//24)
    
    occupied_dates = get_occupied_dates(console_id)
    check_date = selected_date_obj
    while check_date < end_date_obj:
        if check_date in occupied_dates:
            bot.answer_callback_query(call.id, "‚ùå –í—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return
        check_date += timedelta(days=1)
    
    consoles = load_json_file(CONSOLES_FILE)
    
    if console_id not in consoles or consoles[console_id]['status'] != 'available':
        bot.answer_callback_query(call.id, "‚ùå –ö–æ–Ω—Å–æ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    console = consoles[console_id]
    original_cost = selected_hours * console['rental_price']
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
    total_cost, discount_amount, discount_info = calculate_discounted_price(console_id, original_cost, selected_hours)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    start_date_formatted = selected_date_obj.strftime('%d.%m.%Y')
    end_date_formatted = end_date_obj.strftime('%d.%m.%Y')
    
    response = f"üéÆ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã**\n\n"
    response += f"**–ö–æ–Ω—Å–æ–ª—å:** {console['name']} ({console['model']})\n"
    response += f"**–ü–µ—Ä–∏–æ–¥:** {start_date_formatted} - {end_date_formatted}\n"
    response += f"**–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {selected_hours//24} –¥–Ω.\n"
    
    if discount_amount > 0:
        response += f"**–¶–µ–Ω–∞ –±–µ–∑ —Å–∫–∏–¥–∫–∏:** ~~{original_cost} –ª–µ–π~~\n"
        response += f"**–°–∫–∏–¥–∫–∞:** -{discount_amount} –ª–µ–π üî•\n"
        response += f"**–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:** **{total_cost} –ª–µ–π**\n\n"
    else:
        response += f"**–°—Ç–æ–∏–º–æ—Å—Ç—å:** {total_cost} –ª–µ–π\n\n"
    
    if console.get('games'):
        response += f"**–ò–≥—Ä—ã:**\n"
        for game in console['games']:
            response += f"‚Ä¢ {game}\n"
        response += "\n"
    
    response += "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞—Ä–µ–Ω–¥—É?"
    
    markup = types.InlineKeyboardMarkup()
    # –°–æ–∫—Ä–∞—â–∞–µ–º console_id –¥–æ –ø–µ—Ä–≤—ã—Ö 8 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ callback_data
    short_console_id = console_id[:8]
    confirm_callback = f"crd_{short_console_id}_{selected_date}_{selected_hours}"
    markup.add(types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=confirm_callback))
    short_console_id = console_id[:8]
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É", 
                                        callback_data=f"cal_{short_console_id}_{selected_date_obj.strftime('%Y-%m')}"))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    try:
        if call.message.photo:
            bot.delete_message(call.message.chat.id, call.message.message_id)
            bot.send_message(call.message.chat.id, response, parse_mode='Markdown', reply_markup=markup)
        else:
            bot.edit_message_text(response, call.message.chat.id, call.message.message_id,
                                parse_mode='Markdown', reply_markup=markup)
    except Exception as e:
        print(f"Error in rent confirmation: {e}")
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except:
            pass
        bot.send_message(call.message.chat.id, response, parse_mode='Markdown', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('crd_'))
def handle_final_rent_confirmation(call):
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã —Å –¥–∞—Ç–æ–π"""
    user_id = str(call.from_user.id)
    data_parts = call.data.split('_')
    short_console_id = data_parts[1]  # –ü–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤
    selected_date = data_parts[2]  # YYYY-MM-DD
    selected_hours = int(data_parts[3])
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–Ω—ã–π console_id –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–º—É ID
    consoles = load_json_file(CONSOLES_FILE)
    console_id = None
    for cid in consoles.keys():
        if cid.startswith(short_console_id):
            console_id = cid
            break
    
    if not console_id:
        bot.answer_callback_query(call.id, "‚ùå –ö–æ–Ω—Å–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    if is_user_banned(user_id):
        bot.answer_callback_query(call.id, "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        return
    
    # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    selected_date_obj = datetime.strptime(selected_date, '%Y-%m-%d')
    end_date_obj = selected_date_obj + timedelta(hours=selected_hours)
    
    consoles = load_json_file(CONSOLES_FILE)
    
    if console_id not in consoles or consoles[console_id]['status'] != 'available':
        bot.answer_callback_query(call.id, "‚ùå –ö–æ–Ω—Å–æ–ª—å —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    users = load_json_file(USERS_FILE)
    user = users.get(user_id, {})
    
    if not user.get('phone_number') or not user.get('full_name'):
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
        return
    
    console = consoles[console_id]
    original_cost = selected_hours * console['rental_price']
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
    total_cost, discount_amount, discount_info = calculate_discounted_price(console_id, original_cost, selected_hours)
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –∞—Ä–µ–Ω–¥—É
    rental_id = str(uuid.uuid4())
    
    rental_data = {
        'id': rental_id,
        'user_id': user_id,
        'console_id': console_id,
        'start_time': selected_date_obj.isoformat(),
        'estimated_end_time': end_date_obj.isoformat(),
        'duration_hours': selected_hours,
        'total_cost': total_cost,
        'status': 'pending_approval' if is_approval_required() else 'active',
        'created_at': datetime.now().isoformat()
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Ä–µ–Ω–¥—É
    if is_approval_required():
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –∑–∞—è–≤–∫—É –Ω–∞ –∞—Ä–µ–Ω–¥—É
        requests_data = load_json_file(RENTAL_REQUESTS_FILE)
        requests_data[rental_id] = rental_data
        save_json_file(RENTAL_REQUESTS_FILE, requests_data)
        
        response = f"üìã **–ó–∞—è–≤–∫–∞ –Ω–∞ –∞—Ä–µ–Ω–¥—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!**\n\n"
        response += f"üéÆ **–ö–æ–Ω—Å–æ–ª—å:** {console['name']}\n"
        response += f"üìÖ **–ü–µ—Ä–∏–æ–¥:** {selected_date_obj.strftime('%d.%m.%Y')} - {end_date_obj.strftime('%d.%m.%Y')}\n"
        response += f"üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** {total_cost} –ª–µ–π\n\n"
        response += f"‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        admin_id = get_admin_chat_id()
        if admin_id:
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown
            def escape_markdown(text):
                if text is None:
                    return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
                special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
                for char in special_chars:
                    text = str(text).replace(char, f'\\{char}')
                return text
            
            full_name = escape_markdown(user.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
            phone = escape_markdown(user.get('phone_number', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
            console_name = escape_markdown(console['name'])
            
            admin_msg = f"üìã **–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∞—Ä–µ–Ω–¥—É!**\n\n"
            admin_msg += f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {full_name}\n"
            admin_msg += f"üìû **–¢–µ–ª–µ—Ñ–æ–Ω:** {phone}\n"
            admin_msg += f"üéÆ **–ö–æ–Ω—Å–æ–ª—å:** {console_name}\n"
            admin_msg += f"üìÖ **–ü–µ—Ä–∏–æ–¥:** {selected_date_obj.strftime('%d.%m.%Y')} - {end_date_obj.strftime('%d.%m.%Y')}\n"
            admin_msg += f"üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** {total_cost} –ª–µ–π\n"
            admin_msg += f"üÜî **ID –∑–∞—è–≤–∫–∏:** {rental_id}"
            
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{rental_id}"),
                types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{rental_id}")
            )
            
            try:
                bot.send_message(admin_id, admin_msg, parse_mode='Markdown', reply_markup=markup)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
    else:
        # –ü—Ä—è–º–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã
        rentals_data = load_json_file(RENTALS_FILE)
        rental_data['status'] = 'active'
        rentals_data[rental_id] = rental_data
        save_json_file(RENTALS_FILE, rentals_data)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Å–æ–ª–∏
        consoles[console_id]['status'] = 'rented'
        save_json_file(CONSOLES_FILE, consoles)
        
        response = f"‚úÖ **–ê—Ä–µ–Ω–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!**\n\n"
        response += f"üéÆ **–ö–æ–Ω—Å–æ–ª—å:** {console['name']}\n"
        response += f"üìÖ **–ü–µ—Ä–∏–æ–¥:** {selected_date_obj.strftime('%d.%m.%Y')} - {end_date_obj.strftime('%d.%m.%Y')}\n"
        response += f"üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** {total_cost} –ª–µ–π\n"
        response += f"üÜî **ID –∞—Ä–µ–Ω–¥—ã:** `{rental_id}`\n\n"
        response += f"üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Å–æ–ª–∏!"
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except:
        pass
    
    bot.send_message(call.message.chat.id, response, parse_mode='Markdown')

@bot.callback_query_handler(func=lambda call: call.data.startswith('rent_') and len(call.data.split('_')) == 3)
def handle_confirm_rent_with_time(call):
    user_id = str(call.from_user.id)
    data_parts = call.data.split('_')
    console_id = data_parts[1]
    selected_hours = int(data_parts[2])
    
    if is_user_banned(user_id):
        bot.answer_callback_query(call.id, "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        return
    
    consoles = load_json_file(CONSOLES_FILE)
    users = load_json_file(USERS_FILE)
    
    if console_id not in consoles or consoles[console_id]['status'] != 'available':
        bot.answer_callback_query(call.id, "‚ùå –ö–æ–Ω—Å–æ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    console = consoles[console_id]
    user = users.get(user_id, {})
    original_cost = selected_hours * console['rental_price']
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
    total_cost, discount_amount, discount_info = calculate_discounted_price(console_id, original_cost, selected_hours)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
    selected_days = selected_hours // 24
    response = f"‚úÖ **–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∞—Ä–µ–Ω–¥—É**\n\n"
    response += f"üéÆ –ö–æ–Ω—Å–æ–ª—å: {console['name']}\n"
    if selected_days == 1:
        response += f"‚è∞ –í—Ä–µ–º—è: {selected_days} –¥–µ–Ω—å\n"
    elif selected_days in [2, 3, 4]:
        response += f"‚è∞ –í—Ä–µ–º—è: {selected_days} –¥–Ω—è\n"
    else:
        response += f"‚è∞ –í—Ä–µ–º—è: {selected_days} –¥–Ω–µ–π\n"
    
    if discount_amount > 0:
        response += f"üí∞ –¶–µ–Ω–∞ –±–µ–∑ —Å–∫–∏–¥–∫–∏: ~~{original_cost} –ª–µ–π~~\n"
        response += f"üî• –°–∫–∏–¥–∫–∞: -{discount_amount} –ª–µ–π\n"
        response += f"üí∞ **–ö –æ–ø–ª–∞—Ç–µ: {total_cost} –ª–µ–π**\n\n"
    else:
        response += f"üí∞ –ö –æ–ø–ª–∞—Ç–µ: {total_cost} –ª–µ–π\n\n"
    response += f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∞—Ä–µ–Ω–¥—É –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è:"
    
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_rent_{console_id}_{selected_hours}"),
        types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"select_time_{console_id}")
    )
    
    bot.edit_message_text(response, call.message.chat.id, call.message.message_id, 
                         parse_mode='Markdown', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'back_to_selection')
def handle_back_to_selection(call):
    user_id = str(call.from_user.id)
    
    if is_user_banned(user_id):
        bot.answer_callback_query(call.id, "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        return
    
    consoles = load_json_file(CONSOLES_FILE)
    
    if not consoles:
        safe_edit_message(call, "üì≠ –ö–æ–Ω—Å–æ–ª–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return
    
    response = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –∞—Ä–µ–Ω–¥—ã:\n\n"
    markup = types.InlineKeyboardMarkup()
    
    for console_id, console in consoles.items():
        if console['status'] == 'available':
            button_text = f"{console['name']} - {console['rental_price']} –ª–µ–π/—á–∞—Å"
            markup.add(types.InlineKeyboardButton(button_text, callback_data=f"console_{console_id}"))
        else:
            button_text = f"{console['name']} - –ó–∞–Ω—è—Ç–∞"
            markup.add(types.InlineKeyboardButton(button_text, callback_data=f"console_unavailable_{console_id}"))
    
    safe_edit_message(call, response, reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫
@bot.message_handler(func=lambda message: message.text == '‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å')
def admin_panel(message):
    user_id = str(message.from_user.id)
    
    if not is_user_admin(user_id):
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")
        return
    
    response = "‚öôÔ∏è **–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å**\n\n"
    response += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"),
        types.InlineKeyboardButton("üìä –ó–∞—è–≤–∫–∏ –Ω–∞ –∞—Ä–µ–Ω–¥—É", callback_data="admin_requests")
    )
    markup.add(
        types.InlineKeyboardButton("‚≠ê –†–µ–π—Ç–∏–Ω–≥–∏", callback_data="admin_ratings"),
        types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")
    )
    markup.add(
        types.InlineKeyboardButton("üéÆ –í–µ–±-–ø–∞–Ω–µ–ª—å", callback_data="admin_web_info")
    )
    
    bot.reply_to(message, response, parse_mode='Markdown', reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
def admin_statistics(message):
    user_id = str(message.from_user.id)
    
    if not is_user_admin(user_id):
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.")
        return
    
    users = load_json_file(USERS_FILE)
    consoles = load_json_file(CONSOLES_FILE)
    rentals = load_json_file(RENTALS_FILE)
    
    active_rentals = [r for r in rentals.values() if r['status'] == 'active']
    completed_rentals = [r for r in rentals.values() if r['status'] == 'completed']
    available_consoles = [c for c in consoles.values() if c['status'] == 'available']
    
    total_revenue = sum(r.get('total_cost', 0) for r in completed_rentals)
    
    response = "üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã**\n\n"
    response += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n"
    response += f"üéÆ –í—Å–µ–≥–æ –∫–æ–Ω—Å–æ–ª–µ–π: {len(consoles)}\n"
    response += f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Å–æ–ª–µ–π: {len(available_consoles)}\n"
    response += f"üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥: {len(active_rentals)}\n"
    response += f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∞—Ä–µ–Ω–¥: {len(completed_rentals)}\n"
    response += f"üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total_revenue} –ª–µ–π\n\n"
    
    if active_rentals:
        response += "**–ê–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã:**\n"
        for rental in active_rentals[:5]:
            console = consoles.get(rental['console_id'], {})
            user = users.get(rental['user_id'], {})
            response += f"‚Ä¢ {console.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è')} - {user.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}\n"
    
    bot.reply_to(message, response, parse_mode='Markdown')

@bot.message_handler(func=lambda message: message.text == 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏')
def admin_users(message):
    user_id = str(message.from_user.id)
    
    if not is_user_admin(user_id):
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.")
        return
    
    users = load_json_file(USERS_FILE)
    
    response = "üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏**\n\n"
    response += f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n\n"
    response += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    sorted_users = sorted(users.items(), key=lambda x: x[1].get('joined_at', ''), reverse=True)
    
    markup = types.InlineKeyboardMarkup()
    for uid, user in sorted_users[:10]:
        status = "üö´" if user.get('is_banned', False) else "‚úÖ"
        name = user.get('full_name', user.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'))
        button_text = f"{status} {name[:20]}"
        markup.add(types.InlineKeyboardButton(button_text, callback_data=f"user_manage_{uid}"))
    
    bot.reply_to(message, response, parse_mode='Markdown', reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
def admin_notifications(message):
    user_id = str(message.from_user.id)
    
    if not is_user_admin(user_id):
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º.")
        return
    
    rental_requests = load_json_file(RENTAL_REQUESTS_FILE)
    pending_requests = [r for r in rental_requests.values() if r['status'] == 'pending']
    
    response = "üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è**\n\n"
    
    if pending_requests:
        response += f"‚è≥ –û–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫: {len(pending_requests)}\n\n"
        for request in pending_requests[:5]:
            users = load_json_file(USERS_FILE)
            consoles = load_json_file(CONSOLES_FILE)
            user = users.get(request['user_id'], {})
            console = consoles.get(request['console_id'], {})
            
            response += f"‚Ä¢ {user.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')} - {console.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–Ω—Å–æ–ª—å')}\n"
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üìã –ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞—è–≤–∫–∞–º", callback_data="admin_requests"))
        bot.reply_to(message, response, parse_mode='Markdown', reply_markup=markup)
    else:
        response += "‚úÖ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫"
        bot.reply_to(message, response, parse_mode='Markdown')

@bot.message_handler(func=lambda message: message.text == '‚ÑπÔ∏è –ü–æ–º–æ—â—å')
def help_command(message):
    user_id = str(message.from_user.id)
    
    if is_user_admin(user_id):
        help_text = """
üéÆ **–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ (–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä):**



üì± **–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
üìù –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å - –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –∫–æ–Ω—Å–æ–ª—å

üë®‚Äçüíº **–ê–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–∏:**
‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π
üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—è–≤–æ–∫

üåê **–í–µ–±-–ø–∞–Ω–µ–ª—å:** –î–æ—Å—Ç—É–ø–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É 5000
"""
    else:
        help_text = """
üéÆ **–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:**



üì± **–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
üìä –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
üìù –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å - –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –∫–æ–Ω—Å–æ–ª—å

üéØ **–ò–≥—Ä—ã –∏ –º–æ–¥–µ–ª–∏:**
‚Ä¢ PlayStation 4 / PS4 Pro
‚Ä¢ PlayStation 5
‚Ä¢ –ë–æ–ª—å—à–æ–π –≤—ã–±–æ—Ä –∏–≥—Ä

üí≥ **–û–ø–ª–∞—Ç–∞:**
–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—Ä–µ–Ω–¥—ã –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
"""
    
    bot.reply_to(message, help_text, parse_mode='Markdown', reply_markup=get_keyboard_for_user(user_id))

@bot.message_handler(func=lambda message: True)
def handle_other_messages(message):
    user_id = str(message.from_user.id)
    
    if is_user_banned(user_id):
        bot.reply_to(message, "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        return
    
    bot.reply_to(message, "ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ /help", reply_markup=get_keyboard_for_user(user_id))

@bot.callback_query_handler(func=lambda call: call.data.startswith('approve_'))
def handle_approve_request(call):
    admin_id = str(call.from_user.id)
    request_id = call.data.split('_')[1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if admin_id != get_admin_chat_id():
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    rental_requests = load_json_file(RENTAL_REQUESTS_FILE)
    
    if request_id not in rental_requests:
        bot.answer_callback_query(call.id, "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    request = rental_requests[request_id]
    
    if request['status'] not in ['pending', 'pending_approval']:
        bot.answer_callback_query(call.id, "‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–Ω—Å–æ–ª–∏
    consoles = load_json_file(CONSOLES_FILE)
    console_id = request['console_id']
    
    if console_id not in consoles or consoles[console_id]['status'] != 'available':
        bot.answer_callback_query(call.id, "‚ùå –ö–æ–Ω—Å–æ–ª—å –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        request['status'] = 'rejected'
        save_json_file(RENTAL_REQUESTS_FILE, rental_requests)
        return
    
    # –û–¥–æ–±—Ä—è–µ–º –∑–∞—è–≤–∫—É
    request['status'] = 'approved'
    save_json_file(RENTAL_REQUESTS_FILE, rental_requests)
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—é –∫–æ–Ω—Å–æ–ª–∏ (–Ω–∞ 30 –º–∏–Ω—É—Ç)
    create_temp_reservation(request['user_id'], console_id, timeout_minutes=30)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users = load_json_file(USERS_FILE)
    user = users.get(request['user_id'], {})
    console = consoles[console_id]
    user_full_name = user.get('full_name', user.get('first_name', f'user_{request["user_id"]}'))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    existing_documents = check_user_documents(user_full_name, request['user_id'])
    all_documents_exist = all(existing_documents.values())
    
    if all_documents_exist:
        # –í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã - —Å—Ä–∞–∑—É –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
        users[request['user_id']]['verification_step'] = 'location_request'
        users[request['user_id']]['pending_rental_id'] = console_id
        save_json_file(USERS_FILE, users)
        
        user_message = f"‚úÖ **–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!**\n\n"
        user_message += f"üéÆ –ö–æ–Ω—Å–æ–ª—å: {console['name']}\n"
        user_message += f"üí∞ –¶–µ–Ω–∞: {console['rental_price']} –ª–µ–π/—á–∞—Å\n\n"
        user_message += f"üìÑ **–ü–∞—Å–ø–æ—Ä—Ç –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω** ‚úÖ\n"
        user_message += f"(–î–æ–∫—É–º–µ–Ω—Ç—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Ä–∞–Ω–µ–µ)\n\n"
        user_message += f"üìç **–§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥:** –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞—Ä–µ–Ω–¥—ã\n\n" 
        user_message += f"‚ö†Ô∏è **–í–ê–ñ–ù–û:** –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å–æ–ª—å!\n"
        user_message += f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        location_button = types.KeyboardButton('üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é', request_location=True)
        markup.add(location_button)
    else:
        # –ù—É–∂–Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        users[request['user_id']]['verification_step'] = 'passport_front'
        users[request['user_id']]['pending_rental_id'] = console_id
        save_json_file(USERS_FILE, users)
        
        user_message = f"‚úÖ **–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!**\n\n"
        user_message += f"üéÆ –ö–æ–Ω—Å–æ–ª—å: {console['name']}\n"
        user_message += f"üí∞ –¶–µ–Ω–∞: {console['rental_price']} –ª–µ–π/—á–∞—Å\n\n"
        user_message += f"üìÑ **–î–ª—è –Ω–∞—á–∞–ª–∞ –∞—Ä–µ–Ω–¥—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤**\n\n"
        user_message += f"**–®–∞–≥ 1 –∏–∑ 3:** –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ **–ü–ï–†–ï–î–ù–ï–ô —Å—Ç–æ—Ä–æ–Ω—ã –ø–∞—Å–ø–æ—Ä—Ç–∞**\n\n"
        user_message += f"‚ö†Ô∏è **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ç–æ:**\n"
        user_message += f"‚Ä¢ –ß–µ—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ –±–ª–∏–∫–æ–≤\n"
        user_message += f"‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Ç–∞–µ–º—ã–º–∏\n"
        user_message += f"‚Ä¢ –§–æ—Ç–æ —Ü–µ–ª–∏–∫–æ–º, –±–µ–∑ –æ–±—Ä–µ–∑–∞–Ω–Ω—ã—Ö –∫—Ä–∞–µ–≤\n\n"
        user_message += f"üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
        
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
        markup = types.ReplyKeyboardRemove()
    
    try:
        bot.send_message(request['user_id'], user_message, parse_mode='Markdown', reply_markup=markup)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_update_message = f"‚úÖ **–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞**\n\n"
    admin_update_message += f"üë§ {user.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}\n"
    admin_update_message += f"üéÆ {console['name']}\n"
    
    if all_documents_exist:
        admin_update_message += f"üìÑ –ü–∞—Å–ø–æ—Ä—Ç –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω ‚úÖ\n"
        admin_update_message += f"üìç –û–∂–∏–¥–∞–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞—Ä–µ–Ω–¥—ã\n"
    else:
        admin_update_message += f"üìÑ –û–∂–∏–¥–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
    
    admin_update_message += f"‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M')}"
    
    bot.edit_message_text(
        admin_update_message,
        call.message.chat.id,
        call.message.message_id,
        parse_mode='Markdown'
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('reject_'))
def handle_reject_request(call):
    admin_id = str(call.from_user.id)
    request_id = call.data.split('_')[1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if admin_id != get_admin_chat_id():
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    rental_requests = load_json_file(RENTAL_REQUESTS_FILE)
    
    if request_id not in rental_requests:
        bot.answer_callback_query(call.id, "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    request = rental_requests[request_id]
    
    if request['status'] not in ['pending', 'pending_approval']:
        bot.answer_callback_query(call.id, "‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
        return
    
    # –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞—è–≤–∫—É –∏ —É–¥–∞–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—é
    request['status'] = 'rejected'
    remove_temp_reservation(request['user_id'])
    save_json_file(RENTAL_REQUESTS_FILE, rental_requests)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    consoles = load_json_file(CONSOLES_FILE)
    users = load_json_file(USERS_FILE)
    user = users.get(request['user_id'], {})
    console = consoles.get(request['console_id'], {})
    
    user_message = f"‚ùå **–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞**\n\n"
    user_message += f"üéÆ –ö–æ–Ω—Å–æ–ª—å: {console.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–Ω—Å–æ–ª—å')}\n"
    user_message += f"‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M')}\n\n"
    user_message += f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –¥—Ä—É–≥—É—é –∫–æ–Ω—Å–æ–ª—å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if request['user_id'] in users:
        users[request['user_id']]['verification_step'] = None
        users[request['user_id']]['pending_rental_id'] = None
        save_json_file(USERS_FILE, users)
    
    try:
        bot.send_message(request['user_id'], user_message, parse_mode='Markdown')
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    bot.edit_message_text(
        f"‚ùå **–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞**\n\n"
        f"üë§ {user.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}\n"
        f"üéÆ {console.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–Ω—Å–æ–ª—å')}\n"
        f"‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M')}",
        call.message.chat.id,
        call.message.message_id,
        parse_mode='Markdown'
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('end_rental_'))
def handle_end_rental_callback(call):
    user_id = str(call.from_user.id)
    rental_id = call.data.split('_')[2]
    
    if is_user_banned(user_id):
        bot.answer_callback_query(call.id, "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        return
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –∞—Ä–µ–Ω–¥—É
    result = end_rental_by_id(user_id, rental_id)
    
    if result['success']:
        response = f"‚úÖ **–ê—Ä–µ–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
        response += f"üéÆ –ö–æ–Ω—Å–æ–ª—å: {result['console_name']}\n"
        response += f"‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {result['hours']} —á–∞—Å–æ–≤\n"
        response += f"üí∞ –ö –æ–ø–ª–∞—Ç–µ: {result['total_cost']} –ª–µ–π\n\n"
        response += f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!"
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_message = f"üèÅ **–ê—Ä–µ–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º**\n\n"
        admin_message += f"üë§ {result.get('user_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}\n"
        admin_message += f"üì± {result.get('user_phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        admin_message += f"üéÆ {result['console_name']}\n"
        admin_message += f"‚è∞ {result['hours']} —á–∞—Å–æ–≤\n"
        admin_message += f"üí∞ {result['total_cost']} –ª–µ–π"
        
        notify_admin(admin_message)
        
        bot.edit_message_text(response, call.message.chat.id, call.message.message_id, parse_mode='Markdown')
    else:
        bot.answer_callback_query(call.id, f"‚ùå {result['error']}")

def end_rental_by_id(user_id, rental_id):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã –ø–æ ID"""
    rentals = load_json_file(RENTALS_FILE)
    consoles = load_json_file(CONSOLES_FILE)
    users = load_json_file(USERS_FILE)
    
    if rental_id not in rentals:
        return {'success': False, 'error': '–ê—Ä–µ–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}
    
    rental = rentals[rental_id]
    
    if rental['user_id'] != user_id:
        return {'success': False, 'error': '–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∞—Ä–µ–Ω–¥–∞'}
    
    if rental['status'] != 'active':
        return {'success': False, 'error': '–ê—Ä–µ–Ω–¥–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'}
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
    start_time = datetime.fromisoformat(rental['start_time'])
    end_time = datetime.now()
    duration = end_time - start_time
    hours = max(1, int(duration.total_seconds() / 3600))
    
    console = consoles[rental['console_id']]
    total_cost = hours * console['rental_price']
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –∞—Ä–µ–Ω–¥—É
    rental['end_time'] = end_time.isoformat()
    rental['status'] = 'completed'
    rental['total_cost'] = total_cost
    
    # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∫–æ–Ω—Å–æ–ª—å
    console['status'] = 'available'
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in users:
        users[user_id]['total_spent'] = users[user_id].get('total_spent', 0) + total_cost
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    save_json_file(RENTALS_FILE, rentals)
    save_json_file(CONSOLES_FILE, consoles)
    save_json_file(USERS_FILE, users)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    update_rating_on_rental_completion(user_id, rental)
    
    user = users.get(user_id, {})
    
    return {
        'success': True,
        'console_name': console['name'],
        'hours': hours,
        'total_cost': total_cost,
        'user_name': user.get('full_name', user.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')),
        'user_phone': user.get('phone_number', '–ù–µ —É–∫–∞–∑–∞–Ω')
    }

# Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
@bot.callback_query_handler(func=lambda call: call.data == 'admin_web_info')
def handle_admin_web_info(call):
    admin_id = str(call.from_user.id)
    
    if not is_user_admin(admin_id):
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    response = "üåê **–í–µ–±-–ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n"
    response += "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª–Ω–æ–π –≤–µ–±-–ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n\n"
    response += "1Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä\n"
    response += "2Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∞–¥—Ä–µ—Å—É: `http://localhost:5000`\n"
    response += "3Ô∏è‚É£ –í–æ–π–¥–∏—Ç–µ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n\n"
    response += "–í –≤–µ–±-–ø–∞–Ω–µ–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ:\n"
    response += "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Å–æ–ª—è–º–∏\n"
    response += "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫ –Ω–∞ –∞—Ä–µ–Ω–¥—É\n"
    response += "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã\n"
    response += "‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    
    bot.edit_message_text(response, call.message.chat.id, call.message.message_id, parse_mode='Markdown')

@bot.callback_query_handler(func=lambda call: call.data == 'admin_requests')
def handle_admin_requests(call):
    admin_id = str(call.from_user.id)
    
    if not is_user_admin(admin_id):
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    rental_requests = load_json_file(RENTAL_REQUESTS_FILE)
    pending_requests = [r for r in rental_requests.values() if r['status'] == 'pending']
    
    response = "üìä **–ó–∞—è–≤–∫–∏ –Ω–∞ –∞—Ä–µ–Ω–¥—É**\n\n"
    
    if pending_requests:
        response += f"‚è≥ –û–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫: {len(pending_requests)}\n\n"
        
        users = load_json_file(USERS_FILE)
        consoles = load_json_file(CONSOLES_FILE)
        
        markup = types.InlineKeyboardMarkup()
        
        for request in pending_requests[:5]:
            user = users.get(request['user_id'], {})
            console = consoles.get(request['console_id'], {})
            
            response += f"üë§ **{user.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}**\n"
            response += f"üéÆ {console.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–Ω—Å–æ–ª—å')}\n"
            response += f"üí∞ {console.get('rental_price', 0)} –ª–µ–π/—á–∞—Å\n"
            response += f"‚è∞ {request.get('request_time', '')[:16]}\n\n"
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞—è–≤–∫–∏
            markup.add(
                types.InlineKeyboardButton(f"‚úÖ –û–¥–æ–±—Ä–∏—Ç—å {user.get('full_name', '')[:10]}", 
                                         callback_data=f"approve_{request['id']}"),
                types.InlineKeyboardButton(f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å {user.get('full_name', '')[:10]}", 
                                         callback_data=f"reject_{request['id']}")
            )
        
        bot.edit_message_text(response, call.message.chat.id, call.message.message_id, 
                             parse_mode='Markdown', reply_markup=markup)
    else:
        response += "‚úÖ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫"
        bot.edit_message_text(response, call.message.chat.id, call.message.message_id, parse_mode='Markdown')

@bot.callback_query_handler(func=lambda call: call.data == 'admin_settings')
def handle_admin_settings(call):
    admin_id = str(call.from_user.id)
    
    if not is_user_admin(admin_id):
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    settings = load_json_file(ADMIN_SETTINGS_FILE)
    
    response = "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã**\n\n"
    response += f"üïí –ú–∞–∫—Å. –≤—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã: {settings.get('max_rental_hours', 24)} —á–∞—Å–æ–≤\n"
    response += f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞: {settings.get('reminder_hours', 23)} —á–∞—Å–æ–≤\n"
    response += f"‚úÖ –¢—Ä–µ–±–æ–≤–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: {'–î–∞' if settings.get('require_approval', True) else '–ù–µ—Ç'}\n"
    response += f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–í–∫–ª—é—á–µ–Ω—ã' if settings.get('notifications_enabled', True) else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}\n\n"
    response += "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø–∞–Ω–µ–ª—å"
    
    bot.edit_message_text(response, call.message.chat.id, call.message.message_id, parse_mode='Markdown')

@bot.callback_query_handler(func=lambda call: call.data == 'admin_ratings')
def handle_admin_ratings(call):
    admin_id = str(call.from_user.id)
    
    if not is_user_admin(admin_id):
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    users = load_json_file(USERS_FILE)
    ratings_data = load_json_file(RATINGS_FILE)
    
    response = "‚≠ê **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏**\n\n"
    response += f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n"
    response += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º: {len(ratings_data.get('user_ratings', {}))}\n\n"
    response += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–º:"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏
    sorted_users = sorted(users.items(), key=lambda x: x[1].get('joined_at', ''), reverse=True)
    
    markup = types.InlineKeyboardMarkup()
    for uid, user in sorted_users[:10]:
        name = user.get('full_name', user.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'))
        try:
            rating = calculate_user_final_rating(uid)
            if rating:
                button_text = f"‚≠ê {name[:15]} ({rating['final_score']})"
            else:
                button_text = f"‚ûñ {name[:15]} (–±–µ–∑ —Ä–µ–π—Ç–∏–Ω–≥–∞)"
        except:
            button_text = f"‚ûñ {name[:15]} (–±–µ–∑ —Ä–µ–π—Ç–∏–Ω–≥–∞)"
        
        markup.add(types.InlineKeyboardButton(button_text, callback_data=f"rating_manage_{uid}"))
    
    markup.add(types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤", callback_data="rating_stats"))
    
    bot.edit_message_text(response, call.message.chat.id, call.message.message_id, 
                         parse_mode='Markdown', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'admin_users')
def handle_admin_users_callback(call):
    admin_id = str(call.from_user.id)
    
    if not is_user_admin(admin_id):
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    users = load_json_file(USERS_FILE)
    
    response = "üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏**\n\n"
    response += f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n\n"
    
    sorted_users = sorted(users.items(), key=lambda x: x[1].get('joined_at', ''), reverse=True)
    
    markup = types.InlineKeyboardMarkup()
    for uid, user in sorted_users[:10]:
        status = "üö´" if user.get('is_banned', False) else "‚úÖ"
        name = user.get('full_name', user.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'))
        button_text = f"{status} {name[:20]}"
        markup.add(types.InlineKeyboardButton(button_text, callback_data=f"user_manage_{uid}"))
    
    bot.edit_message_text(response, call.message.chat.id, call.message.message_id, 
                         parse_mode='Markdown', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('user_manage_'))
def handle_user_manage(call):
    admin_id = str(call.from_user.id)
    
    if not is_user_admin(admin_id):
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    user_id = call.data.split('_')[2]
    users = load_json_file(USERS_FILE)
    
    if user_id not in users:
        bot.answer_callback_query(call.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    user = users[user_id]
    is_banned = user.get('is_banned', False)
    
    response = f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}\n\n"
    response += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.get('phone_number', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    response += f"üÜî ID: `{user_id}`\n"
    response += f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.get('joined_at', '')[:10]}\n"
    response += f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {user.get('total_spent', 0)} –ª–µ–π\n"
    response += f"üö´ –°—Ç–∞—Ç—É—Å: {'–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' if is_banned else '–ê–∫—Ç–∏–≤–µ–Ω'}\n"
    
    markup = types.InlineKeyboardMarkup()
    if is_banned:
        markup.add(types.InlineKeyboardButton("‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"unban_user_{user_id}"))
    else:
        markup.add(types.InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"ban_user_{user_id}"))
    
    markup.add(types.InlineKeyboardButton("üìç –ó–∞–ø—Ä–æ—Å–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", callback_data=f"request_location_{user_id}"))
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_users"))
    
    bot.edit_message_text(response, call.message.chat.id, call.message.message_id, 
                         parse_mode='Markdown', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('ban_user_'))
def handle_ban_user(call):
    admin_id = str(call.from_user.id)
    
    if not is_user_admin(admin_id):
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    user_id = call.data.split('_')[2]
    users = load_json_file(USERS_FILE)
    
    if user_id in users:
        users[user_id]['is_banned'] = True
        save_json_file(USERS_FILE, users)
        
        bot.answer_callback_query(call.id, "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            bot.send_message(user_id, "üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        except:
            pass
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        user = users[user_id]
        is_banned = user.get('is_banned', False)
        
        response = f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}\n\n"
        response += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.get('phone_number', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        response += f"üÜî ID: `{user_id}`\n"
        response += f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.get('joined_at', '')[:10]}\n"
        response += f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {user.get('total_spent', 0)} –ª–µ–π\n"
        response += f"üö´ –°—Ç–∞—Ç—É—Å: {'–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' if is_banned else '–ê–∫—Ç–∏–≤–µ–Ω'}\n"
        response += f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
        
        markup = types.InlineKeyboardMarkup()
        if is_banned:
            markup.add(types.InlineKeyboardButton("‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"unban_user_{user_id}"))
        else:
            markup.add(types.InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"ban_user_{user_id}"))
        
        markup.add(types.InlineKeyboardButton("üìç –ó–∞–ø—Ä–æ—Å–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", callback_data=f"request_location_{user_id}"))
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_users"))
        
        bot.edit_message_text(response, call.message.chat.id, call.message.message_id, 
                             parse_mode='Markdown', reply_markup=markup)
    else:
        bot.answer_callback_query(call.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

@bot.callback_query_handler(func=lambda call: call.data.startswith('unban_user_'))
def handle_unban_user(call):
    admin_id = str(call.from_user.id)
    
    if not is_user_admin(admin_id):
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    user_id = call.data.split('_')[2]
    users = load_json_file(USERS_FILE)
    
    if user_id in users:
        users[user_id]['is_banned'] = False
        save_json_file(USERS_FILE, users)
        
        bot.answer_callback_query(call.id, "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            bot.send_message(user_id, "‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        except:
            pass
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        user = users[user_id]
        is_banned = user.get('is_banned', False)
        
        response = f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}\n\n"
        response += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.get('phone_number', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        response += f"üÜî ID: `{user_id}`\n"
        response += f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.get('joined_at', '')[:10]}\n"
        response += f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {user.get('total_spent', 0)} –ª–µ–π\n"
        response += f"üö´ –°—Ç–∞—Ç—É—Å: {'–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' if is_banned else '–ê–∫—Ç–∏–≤–µ–Ω'}\n"
        response += f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
        
        markup = types.InlineKeyboardMarkup()
        if is_banned:
            markup.add(types.InlineKeyboardButton("‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"unban_user_{user_id}"))
        else:
            markup.add(types.InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"ban_user_{user_id}"))
        
        markup.add(types.InlineKeyboardButton("üìç –ó–∞–ø—Ä–æ—Å–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", callback_data=f"request_location_{user_id}"))
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_users"))
        
        bot.edit_message_text(response, call.message.chat.id, call.message.message_id, 
                             parse_mode='Markdown', reply_markup=markup)
    else:
        bot.answer_callback_query(call.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

@bot.callback_query_handler(func=lambda call: call.data.startswith('request_location_'))
def handle_request_location(call):
    admin_id = str(call.from_user.id)
    
    if not is_user_admin(admin_id):
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    user_id = call.data.split('_')[2]
    users = load_json_file(USERS_FILE)
    
    if user_id not in users:
        bot.answer_callback_query(call.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    user = users[user_id]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        location_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        location_button = types.KeyboardButton('üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é', request_location=True)
        location_markup.add(location_button)
        
        user_message = f"üìç **–ó–∞–ø—Ä–æ—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n"
        user_message += f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∏–ª –≤–∞—à—É —Ç–µ–∫—É—â—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.\n"
        user_message += f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–µ."
        
        bot.send_message(user_id, user_message, parse_mode='Markdown', reply_markup=location_markup)
        
        bot.answer_callback_query(call.id, "‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞
        admin_response = f"‚úÖ **–ó–∞–ø—Ä–æ—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω**\n\n"
        admin_response += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}\n"
        admin_response += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.get('phone_number', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        admin_response += f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M')}\n\n"
        admin_response += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏."
        
        bot.edit_message_text(admin_response, call.message.chat.id, call.message.message_id, parse_mode='Markdown')
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")

@bot.callback_query_handler(func=lambda call: call.data == 'back_to_users')
def handle_back_to_users(call):
    admin_id = str(call.from_user.id)
    
    if not is_user_admin(admin_id):
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    users = load_json_file(USERS_FILE)
    
    response = "üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏**\n\n"
    response += f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n\n"
    response += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
    
    sorted_users = sorted(users.items(), key=lambda x: x[1].get('joined_at', ''), reverse=True)
    
    markup = types.InlineKeyboardMarkup()
    for uid, user in sorted_users[:10]:
        status = "üö´" if user.get('is_banned', False) else "‚úÖ"
        name = user.get('full_name', user.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'))
        button_text = f"{status} {name[:20]}"
        markup.add(types.InlineKeyboardButton(button_text, callback_data=f"user_manage_{uid}"))
    
    bot.edit_message_text(response, call.message.chat.id, call.message.message_id, 
                         parse_mode='Markdown', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('rating_manage_'))
def handle_rating_manage(call):
    admin_id = str(call.from_user.id)
    
    if not is_user_admin(admin_id):
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    user_id = call.data.split('_')[2]
    users = load_json_file(USERS_FILE)
    
    if user_id not in users:
        bot.answer_callback_query(call.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    user = users[user_id]
    
    try:
        rating = calculate_user_final_rating(user_id)
        if rating:
            response = f"‚≠ê **–†–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** {user.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}\n\n"
            response += f"üèÜ –û–±—â–∏–π –±–∞–ª–ª: {rating['final_score']}/100\n"
            response += f"üìè –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {rating['discipline']}/100\n"
            response += f"‚ù§Ô∏è –õ–æ—è–ª—å–Ω–æ—Å—Ç—å: {rating['loyalty']}/100\n"
            response += f"üéñÔ∏è –°—Ç–∞—Ç—É—Å: {rating['status_name']}\n\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            ratings_data = load_json_file(RATINGS_FILE)
            user_transactions = ratings_data.get('transactions', {}).get(user_id, [])
            if user_transactions:
                response += "üìã **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:**\n"
                for transaction in user_transactions[-3:]:
                    response += f"‚Ä¢ {transaction.get('type', 'unknown')}: {transaction.get('points', 0)} –±–∞–ª–ª–æ–≤\n"
                    response += f"  {transaction.get('comment', '')} ({transaction.get('date', '')[:10]})\n"
        else:
            response = f"‚≠ê **–†–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** {user.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}\n\n"
            response += "üìä –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞\n\n"
    except Exception as e:
        response = f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞: {str(e)}"
    
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É", callback_data=f"add_discipline_{user_id}"),
        types.InlineKeyboardButton("‚ûñ –°–Ω—è—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É", callback_data=f"sub_discipline_{user_id}")
    )
    markup.add(
        types.InlineKeyboardButton("‚ù§Ô∏è –î–æ–±–∞–≤–∏—Ç—å –ª–æ—è–ª—å–Ω–æ—Å—Ç—å", callback_data=f"add_loyalty_{user_id}"),
        types.InlineKeyboardButton("üéÅ –ë–æ–Ω—É—Å –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏", callback_data=f"loyalty_bonus_{user_id}")
    )
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_ratings"))
    
    bot.edit_message_text(response, call.message.chat.id, call.message.message_id, 
                         parse_mode='Markdown', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'rating_stats')
def handle_rating_stats(call):
    admin_id = str(call.from_user.id)
    
    if not is_user_admin(admin_id):
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    users = load_json_file(USERS_FILE)
    ratings_data = load_json_file(RATINGS_FILE)
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_users = len(users)
    users_with_rating = len(ratings_data.get('user_ratings', {}))
    
    premium_count = 0
    regular_count = 0
    risk_count = 0
    total_score = 0
    
    for user_id in users.keys():
        try:
            rating = calculate_user_final_rating(user_id)
            if rating:
                total_score += rating['final_score']
                status = rating['status_name']
                if status == 'Premium':
                    premium_count += 1
                elif status == 'Regular':
                    regular_count += 1
                else:
                    risk_count += 1
        except:
            continue
    
    avg_score = total_score / users_with_rating if users_with_rating > 0 else 0
    
    response = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤**\n\n"
    response += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
    response += f"‚≠ê –° —Ä–µ–π—Ç–∏–Ω–≥–æ–º: {users_with_rating}\n"
    response += f"üìà –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg_score:.1f}/100\n\n"
    response += "**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:**\n"
    response += f"üèÜ Premium: {premium_count}\n"
    response += f"‚≠ê Regular: {regular_count}\n"
    response += f"‚ö†Ô∏è Risk: {risk_count}\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    top_users = []
    for user_id in users.keys():
        try:
            rating = calculate_user_final_rating(user_id)
            if rating:
                user = users[user_id]
                top_users.append({
                    'name': user.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'),
                    'score': rating['final_score']
                })
        except:
            continue
    
    top_users.sort(key=lambda x: x['score'], reverse=True)
    
    if top_users:
        response += "üèÜ **–¢–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n"
        for i, user in enumerate(top_users[:5], 1):
            response += f"{i}. {user['name'][:20]} - {user['score']}/100\n"
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_ratings"))
    
    bot.edit_message_text(response, call.message.chat.id, call.message.message_id, 
                         parse_mode='Markdown', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('add_discipline_'))
def handle_add_discipline(call):
    admin_id = str(call.from_user.id)
    
    if not is_user_admin(admin_id):
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    user_id = call.data.split('_')[2]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
    import json
    import datetime
    
    ratings_data = load_json_file(RATINGS_FILE)
    
    if 'transactions' not in ratings_data:
        ratings_data['transactions'] = {}
    if user_id not in ratings_data['transactions']:
        ratings_data['transactions'][user_id] = []
    
    transaction = {
        'type': 'discipline_bonus',
        'points': 10,
        'comment': '–†—É—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º',
        'date': datetime.datetime.now().isoformat(),
        'admin_id': admin_id
    }
    
    ratings_data['transactions'][user_id].append(transaction)
    
    with open(RATINGS_FILE, 'w', encoding='utf-8') as f:
        json.dump(ratings_data, f, ensure_ascii=False, indent=2)
    
    bot.answer_callback_query(call.id, "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ +10 –±–∞–ª–ª–æ–≤ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã")
    
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ä–µ–π—Ç–∏–Ω–≥–æ–º
    call.data = f"rating_manage_{user_id}"
    handle_rating_manage(call)

@bot.callback_query_handler(func=lambda call: call.data.startswith('sub_discipline_'))
def handle_sub_discipline(call):
    admin_id = str(call.from_user.id)
    
    if not is_user_admin(admin_id):
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    user_id = call.data.split('_')[2]
    
    # –°–Ω–∏–º–∞–µ–º –±–∞–ª–ª—ã –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
    import json
    import datetime
    
    ratings_data = load_json_file(RATINGS_FILE)
    
    if 'transactions' not in ratings_data:
        ratings_data['transactions'] = {}
    if user_id not in ratings_data['transactions']:
        ratings_data['transactions'][user_id] = []
    
    transaction = {
        'type': 'discipline_penalty',
        'points': -15,
        'comment': '–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª (—Ä—É—á–Ω–æ–µ —Å–Ω—è—Ç–∏–µ)',
        'date': datetime.datetime.now().isoformat(),
        'admin_id': admin_id
    }
    
    ratings_data['transactions'][user_id].append(transaction)
    
    with open(RATINGS_FILE, 'w', encoding='utf-8') as f:
        json.dump(ratings_data, f, ensure_ascii=False, indent=2)
    
    bot.answer_callback_query(call.id, "‚ùå –°–Ω—è—Ç–æ -15 –±–∞–ª–ª–æ–≤ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã")
    
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ä–µ–π—Ç–∏–Ω–≥–æ–º
    call.data = f"rating_manage_{user_id}"
    handle_rating_manage(call)

@bot.callback_query_handler(func=lambda call: call.data.startswith('add_loyalty_'))
def handle_add_loyalty(call):
    admin_id = str(call.from_user.id)
    
    if not is_user_admin(admin_id):
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    user_id = call.data.split('_')[2]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–ª—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
    import json
    import datetime
    
    ratings_data = load_json_file(RATINGS_FILE)
    
    if 'transactions' not in ratings_data:
        ratings_data['transactions'] = {}
    if user_id not in ratings_data['transactions']:
        ratings_data['transactions'][user_id] = []
    
    transaction = {
        'type': 'loyalty_bonus',
        'points': 5,
        'comment': '–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞—Ä–µ–Ω–¥–∞ (—Ä—É—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ)',
        'date': datetime.datetime.now().isoformat(),
        'admin_id': admin_id
    }
    
    ratings_data['transactions'][user_id].append(transaction)
    
    with open(RATINGS_FILE, 'w', encoding='utf-8') as f:
        json.dump(ratings_data, f, ensure_ascii=False, indent=2)
    
    bot.answer_callback_query(call.id, "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ +5 –±–∞–ª–ª–æ–≤ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏")
    
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ä–µ–π—Ç–∏–Ω–≥–æ–º
    call.data = f"rating_manage_{user_id}"
    handle_rating_manage(call)

@bot.callback_query_handler(func=lambda call: call.data.startswith('loyalty_bonus_'))
def handle_loyalty_bonus(call):
    admin_id = str(call.from_user.id)
    
    if not is_user_admin(admin_id):
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    user_id = call.data.split('_')[2]
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
    import json
    import datetime
    
    ratings_data = load_json_file(RATINGS_FILE)
    
    if 'transactions' not in ratings_data:
        ratings_data['transactions'] = {}
    if user_id not in ratings_data['transactions']:
        ratings_data['transactions'][user_id] = []
    
    transaction = {
        'type': 'special_loyalty_bonus',
        'points': 15,
        'comment': '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏',
        'date': datetime.datetime.now().isoformat(),
        'admin_id': admin_id
    }
    
    ratings_data['transactions'][user_id].append(transaction)
    
    with open(RATINGS_FILE, 'w', encoding='utf-8') as f:
        json.dump(ratings_data, f, ensure_ascii=False, indent=2)
    
    bot.answer_callback_query(call.id, "üéÅ –î–æ–±–∞–≤–ª–µ–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å +15 –±–∞–ª–ª–æ–≤")
    
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ä–µ–π—Ç–∏–Ω–≥–æ–º
    call.data = f"rating_manage_{user_id}"
    handle_rating_manage(call)

# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º)
@bot.callback_query_handler(func=lambda call: True)
def debug_all_callbacks(call):
    print(f"DEBUG: UNHANDLED CALLBACK RECEIVED: {call.data}")
    bot.answer_callback_query(call.id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ callback")

if __name__ == '__main__':
    print("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)